; Cross-32 instruction table for SYMPL 64-BIT IEEE 754-2008 Floating-Point Emulator 
; version 2.01   March 20, 2018 
; Author:  Jerry D. Harthcock
; Copyright (C) 2017.  All rights reserved.
; A copy of Cross-32 can be purchased from
; Data-Sync Engineering at: http://www.cdadapter.com/cross32.htm  sales@datasynceng.com
; A copy of the Cross-32 manual can be viewed online here:  http://www.cdadapter.com/download/cross32.pdf
; For instrucion table support, contact the author of this table at: SYMPL.gpu@gmail.com
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                 //
//                          SYMPL 64-BIT IEEE 754-2008 Floating-Point Emulator                                     //
//                              Evaluation and Product Development License                                         //
//                                                                                                                 //
// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),   //
// the original author and exclusive copyright owner of these SYMPL SYMPL 64-BIT IEEE 754-2008 Floating-Point      //
// Emulator and related development software ("this IP") hereby grants recipient of this IP ("licensee"), a        //
// world-wide, paid-up, non-exclusive license to implement this IP within the programmable fabric of Xilinx,       //
// Altera, MicroSemi or Lattice Semiconductor brand FPGAs only and used only for the purposes of evaluation,       //
// education, and development of end products and related development tools.  Furthermore, limited to the purposes //
// of prototyping, evaluation, characterization and testing of implementations in a hard, custom or semi-custom    //
// ASIC, any university or institution of higher education may have their implementation of this IP produced for   //
// said limited purposes at any foundary of their choosing provided that such prototypes do not ever wind up in    //
// commercial circulation with such license extending to said foundary and is in connection with said academic     //
// pursuit and under the supervision of said university or institution of higher education.                        //                                  
//                                                                                                                 //
// Any customization, modification, or derivative work of this IP must include an exact copy of this license       //
// and original copyright notice at the very top of each source file and derived netlist, and, in the case of      //
// binaries, a printed copy of this license and/or a text format copy in a separate file distributed with said     //
// netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to remove      //
// any copyright notices from any source file covered under this Evaluation and Product Development License.       //
//                                                                                                                 //
// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR       //
// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM     //
// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                  //
//                                                                                                                 //
// Licensor reserves all his rights without prejudice, including, but in no way limited to, the right to change    //
// or modify the terms and conditions of this Evaluation and Product Development License anytime without notice    //
// of any kind to anyone. By using this IP for any purpose, you agree to all the terms and conditions set forth    //
// in this Evaluation and Product Development License.                                                             //
//                                                                                                                 //
// This Evaluation and Product Development License does not include the right to sell products that incorporate    //
// this IP or any IP derived from this IP.  If you would like to obtain such a license, please contact Licensor.   //
//                                                                                                                 //
// Licensor can be contacted at:  SYMPL.gpu@gmail.com                                                              //
//                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

; SYMPL 64-BIT IEEE 754-2008 Floating-Point Emulator employs a modified Harvard architecture, meaning that it 
; comprises separate program and data memory. It has immediate, direct and indirect addressing modes, as well as 
; table read from program memory using direct or indirect addressing mode.

; Instruction bit field definitions common to both direct and indirect addressing modes:

; RM[1:0] Directed Rounding Mode specifier for float results
; 00 = round nearest
; 01 = round to positive infinity
; 10 = round to negative infinity
; 11 = round to zero 

; IM[1:0] Specifies from which memory the operand read is to take place
; 00 = both operand A and operand B are read from data memory using either
;      direct or indirect addressing modes
; 01 = operand A is either direct or indirect and operand B is immediate
; 10 = operand A is read from program memory using direct (table read from program memory) addressing modes 
;      operand B is either direct or indirect and NEVER immediate
; 11 = 32-bit immediate

; SEXT 1 = signed (sign-extended); 0 = unsigned (zero-extended)

; LEN[1:0] Length, in bytes, of source/destination
; 00 = 1 byte
; 01 = 2 bytes (half-word)
; 10 = 4 bytes (word)
; 11 = 8 bytes (double-word)

; IND 1 = indirect addressing mode for that field; 0 = direct addressing mode for that field
;
; IMOD is used with IND = 1, meaning it is only used with indirect addressing mode for a given field
; IMOD = 1 means: use signed AMOUNT field + ARn contents for effective address; ARn is not modified
;
;          for example,   uw    shft.0 = SHFT(uw:*AR2[45], RIGHT, 3)
;                         uw    shft.0 = SHFT(uw:*AR1[-20], RIGHT, 3)

; IMOD = 0 means: use ARn contents as pointer for read or write. Then automatically post-modify the contents
;          of ARn by adding or subtracting UNsigned AMOUNT field to/from it.
;           
;          for exampl,    uw    shft.0 = SHFT(uw:*AR2++[8], RIGHT, 3)
;                         uw    shft.1 = SHFT(uw:*AR1--[4], LEFT, 6)
                          
;--------------------------------------------------------------------------------
;                  *Indirect Addressing Mode Instruction Format
;                  note: indirect addressing mode can be mixed and matched with:
;                         - indirect addressing mode (any combination)
;                         - immediate addressing mode for srcB for dual operands
;                         - immediate addressing mode for srcA for single operand
;                         - table-read from program memory for srcA for dual operands
;                         - table-read from program memory for srcA for single operand
;                         - immediate data and table-read address modes may not appear on the same line
;--------------------------------------------------------------------------------
;         ______________________   ______________________   ______________________
;        |        DEST          | |        srcA          | |        srcB          |
;                  11111111112222 2 22 2 2 233333333334444 4 44 4 4 455555555556666                    
;  01 23 4 56 7 8 901234567890123 4 56 7 8 901234567890123 4 56 7 8 901234567890123
;  || || | || | | |__________||_| | || | | |__________||_| | || | | |__________||_|
;  RR II S LL I I  +/- AMOUNT *AR S LL I I  +/- AMOUNT *AR S LL I I  +/- AMOUNT *AR
;  MM MM E EE N M                 E EE N M                 E EE N M
;  10 10 X NN D O                 X NN D O                 X NN D O
;        T 10   D                 T 10   D                 T 10   D 
;               |_______________|        |_______________|        |_______________|
;                 DEST[dir addrs]          srcA[dir addrs]          srcB[dir addrs]
;                                        |_______________|                 |______|
;                                         @srcA[tabl adrs]             #srcB[8-bit]
;                                                                  |______________|
;                                                                     #srcB[16-bit]

;--------------------------------------------------------------------------------
;                  Direct Addressing Mode Instruction Format
;                  note:  direct addressing mode can be mixed and matched with:
;                         - indirect addressing mode (any combination)
;                         - immediate addressing mode for srcB for dual operands
;                         - immediate addressing mode for srcA for single operand
;                         - table-read from program memory for srcA for dual operands
;                         - table-read from program memory for srcA for single operand
;                         - immediate data and table-read address modes may not appear on the same line
;--------------------------------------------------------------------------------
;         _____________________   _____________________   _____________________
;        |        DEST         | |        srcA         | |        srcB         |
;                 11111111112222 2 22 2 2233333333334444 4 44 4 4455555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 7 8901234567890123 4 56 7 8901234567890123 
;  || || | || | |______________| | || | |______________| | || | |______________|              
;  RR II S LL I  DEST[dir addrs] S LL I  srcA[dir addrs] S LL I  srcB[dir addrs]               
;  MM MM E EE N  |__________||_| E EE N  |__________||_| E EE N  |__________||_|                               
;  10 10 X NN D   +/- AMOUNT *AR X NN D   +/- AMOUNT *AR X NN D   +/- AMOUNT *AR
;        T 10                    T 10   |______________| T 10           |______|
;                                       @srcA[tabl adrs]            #srcB[8-bit]
;                                                               |______________|
;                                                                  #srcB[16-bit]
;                                           |__________________________________|
;                                                        srcB[32-bit]
;
;--------------------------------------------------------------------------------
;                  #Immediate Addressing Mode Instruction Format
;                  note: immediate addressing mode may not be used with table-read
;                        addressing mode on the same line
;----------------------------------------------------------------------------------
;         _____________________   _____________________   _____________________
;        |        DEST         | |        srcA         | |        srcB         |
;                 11111111112222 2 22 2 2233333333334444 4 44 4 4455555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 7 8901234567890123 4 56 7 8901234567890123 
;  || || | || | |______________| | || | |______________| | || |         |______|              
;  RR II S LL I  DEST[dir addrs] S LL I  srcA[dir addrs] S LL I     #srcB[8-bit]               
;  MM MM E EE N  |__________||_| E EE N  |__________||_| E EE N |______________|                                
;  10 10 X NN D   +/- AMOUNT *AR X NN D   +/- AMOUNT *AR X NN D    #srcB[16-bit]
;        T 10                    T 10                    T 10
;                                           |__________________________________|
;                                                       #srcB[32-bit]
;                                                 
;--------------------------------------------------------------------------------
;            @Table-Read from Program Memory Addressing Mode Instruction Format
;            note: Table-Read addressing mode may not be used with immediate
;                  addressing mode on the same line
;                  srcB can be direct or indirect address mode
;--------------------------------------------------------------------------------
;         _____________________   _____________________   _____________________
;        |        DEST         | |        srcA         | |        srcB         |
;                 11111111112222 2 22 2 2233333333334444 4 44 4 4455555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 7 8901234567890123 4 56 7 8901234567890123 
;  || || | || | |______________| | || | |______________| | || | |______________|              
;  RR II S LL I  DEST[dir addrs] S LL I @srcA[tabl adrs] S LL I  srcB[dir addrs]               
;  MM MM E EE N  |__________||_| E EE N                  E EE N  |__________||_|                                
;  10 10 X NN D   +/- AMOUNT *AR X NN D                  X NN D   +/- AMOUNT *AR
;        T 10                    T 10                    T 10  
;                                           |__________________________________|
;                                                        @srcB[32-bit]
                                                                                                                             
                                                                
;--------------------------------------------------------------------------------
;                  Bit Test and Branch (if Set) Instruction 
;                  note: test bit# of contents of srcB
;                        if set, then load PC with relative +/- displacement 
;                        srcA can be direct or indirect address mode
;                        range is -8192 to +8191 from Bit Test instruction
;--------------------------------------------------------------------------------
;         _____________________   ______________________   ___________________
;        |        DEST         | |         srcA         | |       srcB        |
;                 11111111112222 2 22 2  2233333333334444 444444 55555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 7  8901234567890123 456789 01234567890123               
;  || || | || | 1111111110100000 | || |  |______________| |____| |____________|              
;  RR II S LL I   F   F   A   0  S LL I   srcA[dir addrs]  Bit#    +/- Displ                  
;  MM MM E EE N |______________| E EE N   |__________||_|           -8192 to                       
;  10 10 X NN D  DEST[dir addrs] X NN D    +/- AMOUNT *AR           +8191
;        T 10                    T 10   


;--------------------------------------------------------------------------------
;                  Bit Test and Branch (if Clear) Instruction 
;                  note: test bit# of contents of srcB
;                        if clear, then load PC with relative +/- displacement 
;                        srcA can be direct or indirect address mode
;                        range is -8192 to +8191 from Bit Test instruction
;--------------------------------------------------------------------------------                  
;         _____________________   _____________________   ___________________
;        |        DEST         | |        srcA         | |       srcB        |
;                 11111111112222 2 22 2 2233333333334444 444444 55555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 7 8901234567890123 456789 01234567890123               
;  || || | || | 1111111110010000 | || | |______________| |____| |____________|              
;  RR II S LL I   F   F   9   8  S LL I  srcA[dir addrs]  Bit#    +/- Displ                
;  MM MM E EE N |______________| E EE N  |__________||_|           -8192 to         
;  10 10 X NN D  DEST[dir addrs] X NN D   +/- AMOUNT *AR           +8191
;        T 10                    T 10                    


;-----------------------------------------------------------------------------------
;                  (Long) Branch Instruction 
;                  note: unconditional branch relative
;                        load PC with relative +/- displacement                                              
;                        srcB can be direct or indirect address mode                                         
;                        range is -2147483648 to +2147483647 from Branch instruction                         
;-----------------------------------------------------------------------------------                         
;         _____________________   ____________________   _____________________
;        |        DEST         | |        srcA        | |        srcB         |
;                 11111111112222 2 22 22233333333334444 4 44 4 4455555555556666                    
;  01 23 4 56 7 8901234567890123 4 56 78901234567890123 4 56 7 8901234567890123               
;  || || | || | 1111111110010000 | || |    |__________________________________|                             
;  RR II S LL I   F   F   F   8  S LL I                #srcB[32-bit]                              
;  MM MM E EE N |______________| E EE N                                  
;  10 10 X NN D  DEST[dir addrs] X NN D                  
;        T 10                    T 10                    


;--------------------------------------------------------------------------------
;                  Shift Operator  
;                  note: shifts the specified data the specified number of times
;                        using the specified shift mode.  it affects C, Z and N 
;                        when the result is read out of the specified (1 of 16)
;                        result buffers.  
;--------------------------------------------------------------------------------
;         _____________________   _____________________   _______________________              Shift
;        |        DEST         | |        srcA         | |         srcB          |        Code Type 
;                 11111111112222 2 22 2 2233333333334444 4 44 4 445555 5555556 666       ------------              
;  01 23 4 56 7 8901234567890123 4 56 7 8901234567890123 4 56 7 890123 4567890 123        000 | LEFT     
;  || || | || | 11011010xxxxxxxx | || | |______________| | || |  |___| xxxxxxx |_|        001 | LSL    
;  RR II S LL I   D   B   7   8- S LL I  srcA[dir addrs] S LL I  #Bits         Shift      010 | ASL           
;  MM MM E EE N   D   B   0   0  E EE N  |__________||_| E EE N                Type       011 | ROL
;  10 10 X NN D |______________| X NN D   +/- AMOUNT *AR X NN D                           100 | RIGHT
;        T 10    DEST[dir addrs] T 10                    T 10                             101 | LSR                         
;                                                                                         110 | ASR                         
;                                                                                         111 | ROR                         


                                                                                                                   
;---------------------------------                                                                              
;Register/Flag definition section                                                                               
;---------------------------------                                                                              
1, "LEFT", "LSL", "ASL", "ROL", "RIGHT", "LSR", "ASR", "ROR"   ;type of SHFT                                       
2, "AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "SP"                                                           
3, "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"                           
4, "C"                                                                                                                   
;---------------------------
;Operand definition section
;---------------------------
*
;NUM	START	LENGTH   EXP    LOW       HIGH         ;COMMENT
1,	      8,	  16,     #,     0,       0xFFFF       ;direct destination
2,	     28,      16,     #,     0,       0xFFFF       ;direct SrcA
3,       48,      16,     #,     0,       0xFFFF       ;direct SrcB

4,       21,	   3,     @2,    0x0,     0x7,        ;indirect destination  
5,       41,       3,     @2,    0x0,     0x7,        ;indirect SrcA  
6,       61,       3,     @2,    0x0,     0x7,        ;indirect SrcB 

7,       56,      8,      #,     0x0,    0xFF          ;immediate MOV #8-bits  {srcB} combined
8,       48,      16,     #,     0x0,    0xFFFF        ;immediate MOV #16-bits {srcB} combined
9,       32,      32,     #,     0x80000000,   0x7FFFFFFF   ;immediate MOV #32-bits {srcA,srcB} combined
10,      24,      40,     #,     0x0,     0xFFFFFFFFFF ;40-bit immediate mode is not supported by CROSS-32
11,       6,       4,     #,     0,       0xF          ;dummy field, to permit inclusion of operator name as "OP:"(srcA, srcB)
12,      50,      14,     {#-$}, $-8192,  $+8191       ;relative branch
13,      44,       6,     #,     0,       63           ;bit number for btbs/c instructions

14,      61,       3,     @1,    0,       0x7          ;shift type

15,      24,       3,     #,     0,       0x7          ;signed, unsigned, byte, half-word, word, or double-word (64-bits) --for operandA
16,      44,       3,     #,     0,       0x7          ;signed, unsigned, byte, half-word, word, or double-word (64-bits) --for operandB

17,      49,       5,     @3,    0,       31           ;shift amount

18,       9,      12,     #, -2047,      +2047         ;indirect destination offset e.g., *AR1[-20]
19,       9,      12,     #,     0,       4095         ;indirect destination with automatic ARn post-increment by specified amount e.g., *AR3++[4]
20,       9,      12,     {0-#}, 0,       4095         ;indirect destination with automatic ARn post-decrement by specified amount e.g., *AR3--[8]

21,       29,      12,    #, -2047,      +2047         ;indirect srcA offset e.g., *AR1[-20]
22,       29,      12,    #,     0,       4095         ;indirect srcA with automatic ARn post-increment by specified amount e.g., *AR3++[4]
23,       29,      12,    {0-#}, 0,       4095         ;indirect srcA with automatic ARn post-decrement by specified amount e.g., *AR3--[8]

24,       49,      12,    #, -2047,      +2047         ;indirect srcA offset e.g., *AR1[-20]
25,       49,      12,    #,     0,       4095         ;indirect srcB with automatic ARn post-increment by specified amount e.g., *AR3++[4]
26,       49,      12,    {0-#}, 0,       4095         ;indirect srcB with automatic ARn post-decrement by specified amount e.g., *AR3--[8]
27,       32,      32,    {#-$}, 0x80000000, 0x7FFFFFFF   ; relative long branch 
28,        4,       3,    #,     0,       0x7            ;signed, unsigned, byte, half-word, word, or double-word (64-bits) --for Destination
29,       32,      32,    #,     0x80000000,   0x7FFFFFFF   ;direct MOV 32-bits {srcA,srcB} combined
30,       63,       1,    @4,    0,       0            ;dummy value

;-------------------------------------------------------------
; SYMPL INTERMEDIATE LANGUAGE (IL) addressing modes section
;-------------------------------------------------------------
*                                     

1,{1}={16}:#{7}^1000000000000000:                    ;MOV#8
2,*{4}[{18}]={16}:#{7}^1080000000000000:             ;MOV#8
3,*{4}++[{19}]={16}:#{7}^1000000000000000:           ;MOV#8
4,*{4}--[{20}]={16}:#{7}^1000000000000000:           ;MOV#8
5,{1}={16}:#{8}^1000000000000000:                    ;MOV#16
6,*{4}[{18}]={16}:#{8}^1080000000000000:             ;MOV#16
7,*{4}++[{19}]={16}:#{8}^1000000000000000:           ;MOV#16
8,*{4}--[{20}]={16}:#{8}^1000000000000000:           ;MOV#16
9,{1}={15}:#{9}^3000000000000000:                    ;MOV#32
10,*{4}[{18}]={15}:#{9}^3080000000000000:            ;MOV#32
11,*{4}++[{19}]={15}:#{9}^3000000000000000:          ;MOV#32
12,*{4}--[{20}]={15}:#{9}^3000000000000000:          ;MOV#32
13,{1}=#{10}^3000000000000000:                       ;MOV#40 40-bit immediate mode is not supported by CROSS-32
14,*{4}[{18}]=#{10}^3180000000000000:                ;MOV#40 40-bit immediate mode is not supported by CROSS-32
15,*{4}++[{19}]=#{10}^3100000000000000:              ;MOV#40 40-bit immediate mode is not supported by CROSS-32
16,*{4}--[{20}]=#{10}^3100000000000000:              ;MOV#40 40-bit immediate mode is not supported by CROSS-32
17,{1}={15}:{2}^0000000000000000:
18,{1}={15}:*{5}[{21}]^0000001800000000:
19,{1}={15}:*{5}++[{22}]^0000001000000000:
20,{1}={15}:*{5}--[{23}]^0000001000000000:
21,*{4}[{18}]={15}:{2}^0180000000000000:
22,*{4}[{18}]={15}:*{5}[{21}]^0180001800000000:
23,*{4}[{18}]={15}:*{5}++[{22}]^0180001000000000:
24,*{4}[{18}]={15}:*{5}--[{23}]^0180001000000000:
25,*{4}++[{19}]={15}:{2}^0100000000000000:
26,*{4}++[{19}]={15}:*{5}[{21}]^0100001800000000:
27,*{4}++[{19}]={15}:*{5}++[{22}]^0100001000000000:
28,*{4}++[{19}]={15}:*{5}--[{23}]^0100001000000000:
29,*{4}--[{20}]={15}:{2}^0100000000000000:
30,*{4}--[{20}]={15}:*{5}[{21}]^0100001800000000:
31,*{4}--[{20}]={15}:*{5}++[{22}]^0100001000000000:
32,*{4}--[{20}]={15}:*{5}--[{23}]^0100001000000000:
33,{1}={15}:@{2}^2000000000000000:
34,*{4}[{18}]={15}:@{2}^2180000000000000:
35,*{4}++[{19}]={15}:@{2}^2100000000000000:
36,*{4}--[{20}]={15}:@{2}^2100000000000000:
37,{1}={11}:({15}:@{2})^2000000000000000:
38,*{4}[{18}]={11}:({15}:@{2})^2180000000000000:
39,*{4}++[{19}]={11}:({15}:@{2})^2100000000000000:
40,*{4}--[{20}]={11}:({15}:@{2})^2100000000000000:
41,{1}={11}:({15}:{2})^0000000000000000:
42,{1}={11}:({15}:*{5}[{21}])^0000001800000000:
43,{1}={11}:({15}:*{5}++[{22}])^0000001000000000:
44,{1}={11}:({15}:*{5}--[{23}])^0000001000000000:
45,*{4}[{18}]={11}:({15}:{2})^0180000000000000:
46,*{4}[{18}]={11}:({15}:*{5}[{21}])^0180001800000000:
47,*{4}[{18}]={11}:({15}:*{5}++[{22}])^0180001000000000:
48,*{4}[{18}]={11}:({15}:*{5}--[{23}])^0180001000000000:
49,*{4}++[{19}]={11}:({15}:{2})^0100000000000000:
50,*{4}++[{19}]={11}:({15}:*{5}[{21}])^0100001800000000:
51,*{4}++[{19}]={11}:({15}:*{5}++[{22}])^0100001000000000:
52,*{4}++[{19}]={11}:({15}:*{5}--[{23}])^0100001000000000:
53,*{4}--[{20}]={11}:({15}:{2})^0100000000000000:
54,*{4}--[{20}]={11}:({15}:*{5}[{21}])^0100001800000000:
55,*{4}--[{20}]={11}:({15}:*{5}++[{22}])^0100001000000000:
56,*{4}--[{20}]={11}:({15}:*{5}--[{23}])^0100001000000000:
57,{1}={11}:({15}:@{2},{16}:{3})^2000000000000000:
58,{1}={11}:({15}:@{2},{16}:*{6}[{24}])^2000000000018000:
59,{1}={11}:({15}:@{2},{16}:*{6}++[{25}])^2000000000010000:
60,{1}={11}:({15}:@{2},{16}:*{6}--[{26}])^2000000000010000:
61,*{4}[{18}]={11}:({15}:@{2},{16}:{3})^2180000000000000:
62,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}[{24}])^2180000000018000:
63,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}++[{25}])^2180000000010000:
64,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}--[{26}])^2180000000010000:
65,*{4}++[{19}]={11}:({15}:@{2},{16}:{3})^2100000000000000:
66,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}[{24}])^2100000000018000:
67,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}++[{25}])^2100000000010000:
68,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}--[{26}])^2100000000010000:
69,*{4}--[{20}]={11}:({15}:@{2},{16}:{3})^2100000000000000:
70,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}[{24}])^2100000000018000:
71,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}++[{25}])^2100000000010000:
72,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}--[{26}])^2100000000010000:
73,{1}={11}:({15}:{2},{16}:#{8})^1000000000000000:
74,{1}={11}:({15}:*{5}[{21}],{16}:#{8})^1000001800000000:
75,{1}={11}:({15}:*{5}++[{22}],{16}:#{8})^1000001000000000:
76,{1}={11}:({15}:*{5}--[{23}],{16}:#{8})^1000001000000000:
77,*{4}[{18}]={11}:({15}:{2},{16}:#{8})^1180000000000000:
78,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:#{8})^1180001800000000:
79,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:#{8})^1180001000000000:
80,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:#{8})^1180001000000000:
81,*{4}++[{19}]={11}:({15}:{2},{16}:#{8})^1100000000000000:
82,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:#{8})^1100001800000000:
83,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:#{8})^1100001000000000:
84,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:#{8})^1100001000000000:
85,*{4}--[{20}]={11}:({15}:{2},{16}:#{8})^1100000000000000:
86,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:#{8})^1100001800000000:
87,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:#{8})^1100001000000000:
88,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:#{8})^1100001000000000:
89,{1}={11}:({15}:{2},{16}:{3})^0000000000000000:
90,{1}={11}:({15}:{2},{16}:*{6}[{24}])^0000000000018000:
91,{1}={11}:({15}:{2},{16}:*{6}++[{25}])^0000000000010000:
92,{1}={11}:({15}:{2},{16}:*{6}--[{26}])^0000000000010000:
93,{1}={11}:({15}:*{5}[{21}],{16}:{3})^0000001800000000:
94,{1}={11}:({15}:*{5}[{21}],{16}:*{6}[{24}])^0000001800018000:
95,{1}={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}])^0000001800010000:
96,{1}={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}])^0000001800010000:
97,{1}={11}:({15}:*{5}++[{22}],{16}:{3})^0000001000000000:
98,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}])^0000001000018000:
99,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}])^0000001000010000:
100,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}])^0000001000010000:
101,{1}={11}:({15}:*{5}--[{23}],{16}:{3})^0000001000000000:
102,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}])^0000001000018000:
103,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}])^0000001000010000:
104,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}])^0000001000010000:
105,*{4}[{18}]={11}:({15}:{2},{16}:{3})^0180000000000000:
106,*{4}[{18}]={11}:({15}:{2},{16}:*{6}[{24}])^0180000000018000:
107,*{4}[{18}]={11}:({15}:{2},{16}:*{6}++[{25}])^0180000000010000:
108,*{4}[{18}]={11}:({15}:{2},{16}:*{6}--[{26}])^0180000000010000:
109,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:{3})^0180001800000000:
110,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}])^0180001800018000:
111,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}])^0180001800010000:
112,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}])^0180001800010000:
113,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:{3})^0180001000000000:
114,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}])^0180001000018000:
115,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}])^0180001000010000:
116,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}])^0180001000010000:
117,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:{3})^0180001000000000:
118,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}])^0180001000018000:
119,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}])^0180001000010000:
120,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}])^0180001000010000:
121,*{4}++[{19}]={11}:({15}:{2},{16}:{3})^0100000000000000:
122,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}[{24}])^0100000000018000:
123,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}++[{25}])^0100000000010000:
124,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}--[{26}])^0100000000010000:
125,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:{3})^0100001800000000:
126,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}])^0100001800018000:
127,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}])^0100001800010000:
128,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}])^0100001800010000:
129,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:{3})^0100001000000000:
130,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}])^0100001000018000:
131,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}])^0100001000010000:
132,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}])^0100001000010000:
133,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:{3})^0100001000000000:
134,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}])^0100001000018000:
135,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}])^0100001000010000:
136,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}])^0100001000010000:
137,*{4}--[{20}]={11}:({15}:{2},{16}:{3})^0100000000000000:
138,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}[{24}])^0100000000018000:
139,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}++[{25}])^0100000000010000:
140,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}--[{26}])^0100000000010000:
141,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:{3})^0100001800000000:
142,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}])^0100001800018000:
143,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}])^0100001800010000:
144,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}])^0100001800010000:
145,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:{3})^0100001000000000:
146,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}])^0100001000018000:
147,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}])^0100001000010000:
148,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}])^0100001000010000:
149,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:{3})^0100001000000000:
150,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}])^0100001000018000:
151,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}])^0100001000010000:
152,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}])^0100001000010000:

153,{1}={11}:({15}:{2},{14},{17})^1000000000000000:                     ;SHIFT                                        
154,{1}={11}:({15}:*{5}[{21}],{14},{17})^1000001800000000:                                                            
155,{1}={11}:({15}:*{5}++[{22}],{14},{17})^1000001000000000:                                                          
156,{1}={11}:({15}:*{5}--[{23}],{14},{17})^1100001000000000:                                                          
157,*{4}[{18}]={11}:({15}:{2},{14},{17})^1180000000000000:                                                            
158,*{4}[{18}]={11}:({15}:*{5}[{21}],{14},{17})^1180001800000000:                                                     
159,*{4}[{18}]={11}:({15}:*{5}++[{22}],{14},{17})^1180001000000000:                                                   
160,*{4}[{18}]={11}:({15}:*{5}--[{23}],{14},{17})^1180001000000000:                                                   
161,*{4}++[{19}]={11}:({15}:{2},{14},{17})^1100000000000000:                                                          
162,*{4}++[{19}]={11}:({15}:*{5}[{21}],{14},{17})^1100001800000000:                                                   
163,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{14},{17})^1100001000000000:                                                 
164,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{14},{17})^1100001000000000:                                                 
165,*{4}--[{20}]={11}:({15}:{2},{14},{17})^1100000000000000:                                                          
166,*{4}--[{20}]={11}:({15}:*{5}[{21}],{14},{17})^1100001800000000:                                                   
167,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{14},{17})^1100001000000000:                                                 
168,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{14},{17})^1100001000000000:                                                 

169,{1}={15}:{29}^0000000800000000:                 ;MOV 32      ;direct 32-bit mov address  
170,*{4}[{18}]={15}:{29}^0180000800000000:          ;MOV 32      ;IMOD for srcA set to indicate 32-bit direct address
171,*{4}++[{19}]={15}:{29}^0100000800000000:        ;MOV 32
172,*{4}--[{20}]={15}:{29}^0100000800000000:        ;MOV 32

173,{1}={15}:@{9}^2000000800000000:                 ;MOV 32      ;@table-read 32-bit mov address
174,*{4}[{18}]={15}:@{9}^2180000800000000:          ;MOV 32      ;IMOD for srcA set to indicate 32-bit direct @table-read address
175,*{4}++[{19}]={15}:@{9}^2100000800000000:        ;MOV 32
176,*{4}--[{20}]={15}:@{9}^2100000800000000:        ;MOV 32


177,{15}:{2})(^0000000000000000:                    ;"FOR"
178,{15}:*{5}[{21}])(^0000001800000000:
179,{15}:*{5}++[{22}])(^0000001000000000:
180,{15}:*{5}--[{23}])(^0000001000000000:
181,{16}:#{8})(^1000000000000000:
182,@{8})(^2000000000000000:

183,{12})^0000000000000000:                           ;NEXT0/1 (DBNZ) alias

184,{12}^0000000000000000:                            ;GOTO/GOSUB

185,{16}:#{8}^1000000000000000:                       ;Repeat RPT (RPT is alias of MOV)
186,[{5}]^0000001800000000:                           ;use contents of ARn as repeat value
187,[{5}]++^0000001000800000:                         ;use contents of ARn as repeat value then post-increment ARn by 1
188,[{5}]--^00000017FF800000:                         ;use contents of ARn as repeat value then post-decrement ARn by 1

189,{15}:{2}:[{13}]==1)GOTO:{12}^10FFA00000000000:                      ;BTBS             
190,{15}:*{5}[{21}]:[{13}]==1)GOTO:{12}  ^10FFA01800000000:                                     
191,{15}:*{5}++[{22}]:[{13}]==1)GOTO:{12}^10FFA01000000000:                                     
192,{15}:*{5}--[{23}]:[{13}]==1)GOTO:{12}^10FFA01000000000:

193,{15}:{2}:[{13}]==0)GOTO:{12}^10FF980000000000:                      ;BTBC              
194,{15}:*{5}[{21}]:[{13}]==0)GOTO:{12}  ^10FF981800000000:                                         
195,{15}:*{5}++[{22}]:[{13}]==0)GOTO:{12}^10FF981000000000:                                         
196,{15}:*{5}--[{23}]:[{13}]==0)GOTO:{12}^10FF981000000000: 

197,{27}^3000000000000000:                                              ;BRANCH  (unconditional long relative branch)


;--------------------------------------------------------------------------------------------
; Conventional "MOV" assembly language formatings used only with "MOV", "m" or "." mneumonics
;--------------------------------------------------------------------------------------------

198,{28}:{1},{16}:#{7}^1000000000000000:                          ;MOV#8                                                                   
199,{28}:*{4}[{18}],{16}:#{7}^1180000000000000:                   ;MOV#8                                                                   
200,{28}:*{4}++[{19}],{16}:#{7}^1100000000000000:                 ;MOV#8                                                                   
201,{28}:*{4}--[{20}],{16}:#{7}^1100000000000000:                 ;MOV#8                                                                   
202,{28}:{1},{16}:#{8}^1000000000000000:                          ;MOV#16                                                                  
203,{28}:*{4}[{18}],{16}:#{8}^1180000000000000:                   ;MOV#16                                                                  
204,{28}:*{4}++[{19}],{16}:#{8}^1100000000000000:                 ;MOV#16                                                                  
205,{28}:*{4}--[{20}],{16}:#{8}^1100000000000000:                 ;MOV#16                                                                  
206,{28}:{1},{15}:#{9}^3000000000000000:                          ;MOV#32                                                                  
207,{28}:*{4}[{18}],{15}:#{9}^3180000000000000:                   ;MOV#32                                                                  
208,{28}:*{4}++[{19}],{15}:#{9}^3100000000000000:                 ;MOV#32                                                                  
209,{28}:*{4}--[{20}],{15}:#{9}^3100000000000000:                 ;MOV#32                                                                  
210,{28}:{1},#{10}^3000000000000000:                              ;MOV#40 40-bit immediate mode is not supported by CROSS-32
211,{28}:*{4}[{18}],#{10}^3180000000000000:                       ;MOV#40 40-bit immediate mode is not supported by CROSS-32
212,{28}:*{4}++[{19}],#{10}^3100000000000000:                     ;MOV#40 40-bit immediate mode is not supported by CROSS-32
213,{28}:*{4}--[{20}],#{10}^3100000000000000:                     ;MOV#40 40-bit immediate mode is not supported by CROSS-32
;210,{28}:{1},{15}:{29}^0000000800000000:                         ;direct 32-bit mov address                                                                  
;211,{28}:*{4}[{18}],{15}:{29}^0180000800000000:                  ;direct 32-bit mov address                                                                  
;212,{28}:*{4}++[{19}],{15}:{29}^0100000800000000:                ;direct 32-bit mov address                                                                  
;213,{28}:*{4}--[{20}],{15}:{29}^0100000800000000:                ;direct 32-bit mov address                                                                  
214,{28}:{1},{15}:{2}^0000000000000000:                                                                                            
215,{28}:{1},{15}:*{5}[{21}]^0000001800000000:                                                                                     
216,{28}:{1},{15}:*{5}++[{22}]^0000001000000000:                                                                                   
217,{28}:{1},{15}:*{5}--[{23}]^0000001000000000:                                                                                   
218,{28}:*{4}[{18}],{15}:{2}^0180000000000000:                                                                                     
219,{28}:*{4}[{18}],{15}:*{5}[{21}]^0180001800000000:                                                                              
220,{28}:*{4}[{18}],{15}:*{5}++[{22}]^0180001000000000:                                                                            
221,{28}:*{4}[{18}],{15}:*{5}--[{23}]^0180001000000000:                                                                            
222,{28}:*{4}++[{19}],{15}:{2}^0100000000000000:                                                                                   
223,{28}:*{4}++[{19}],{15}:*{5}[{21}]^0100001800000000:                                                                            
224,{28}:*{4}++[{19}],{15}:*{5}++[{22}]^0100001000000000:                                                                          
225,{28}:*{4}++[{19}],{15}:*{5}--[{23}]^0100001000000000:                                                                          
226,{28}:*{4}--[{20}],{15}:{2}^0100000000000000:                                                                                   
227,{28}:*{4}--[{20}],{15}:*{5}[{21}]^0100001800000000:                                                                            
228,{28}:*{4}--[{20}],{15}:*{5}++[{22}]^0100001000000000:                                                                          
229,{28}:*{4}--[{20}],{15}:*{5}--[{23}]^0100001000000000:                                                                          
230,{28}:{1},{15}:@{2}^2000000000000000:                                                                                           
231,{28}:*{4}[{18}],{15}:@{2}^2180000000000000:                                                                                    
232,{28}:*{4}++[{19}],{15}:@{2}^2100000000000000:                                                                                  
233,{28}:*{4}--[{20}],{15}:@{2}^2100000000000000:                                                                                  
234,{28}:{1},{15}:@{2}^2000000000000000:                                                                                           
235,{28}:*{4}[{18}],{15}:@{2}^2180000000000000:                                                                                    
236,{28}:*{4}++[{19}],{15}:@{2}^2100000000000000:                                                                                  
237,{28}:*{4}--[{20}],{15}:@{2}^2100000000000000:                                                                                  
238,{28}:{1},{15}:{2}^0000000000000000:                                                                                            
239,{28}:{1},{15}:*{5}[{21}]^0000001800000000:                                                                                     
240,{28}:{1},{15}:*{5}++[{22}]^0000001000000000:                                                                                   
241,{28}:{1},{15}:*{5}--[{23}]^0000001000000000:                                                                                   
242,{28}:*{4}[{18}],{15}:{2}^0180000000000000:                                                                                     
243,{28}:*{4}[{18}],{15}:*{5}[{21}]^0180001800000000:                                                                              
244,{28}:*{4}[{18}],{15}:*{5}++[{22}]^0180001000000000:                                                                            
245,{28}:*{4}[{18}],{15}:*{5}--[{23}]^0180001000000000:                                                                            
246,{28}:*{4}++[{19}],{15}:{2}^0100000000000000:                                                                                   
247,{28}:*{4}++[{19}],{15}:*{5}[{21}]^0100001800000000:                                                                            
248,{28}:*{4}++[{19}],{15}:*{5}++[{22}]^0100001000000000:                                                                          
249,{28}:*{4}++[{19}],{15}:*{5}--[{23}]^0100001000000000:                                                                          
250,{28}:*{4}--[{20}],{15}:{2}^0100000000000000:                                                                                   
251,{28}:*{4}--[{20}],{15}:*{5}[{21}]^0100000800000000:                                                                            
252,{28}:*{4}--[{20}],{15}:*{5}++[{22}]^0100000000000000:                                                                          
253,{28}:*{4}--[{20}],{15}:*{5}--[{23}]^0100000000000000:                                                                          
254,{28}:{1},{15}:@{2},{16}:{3}^2000000000000000:                                                                                  
255,{28}:{1},{15}:@{2},{16}:*{6}[{24}]^2000000000018000:                                                                           
256,{28}:{1},{15}:@{2},{16}:*{6}++[{25}]^2000000000010000:                                                                         
257,{28}:{1},{15}:@{2},{16}:*{6}--[{26}]^2000000000010000:                                                                         
258,{28}:*{4}[{18}],{15}:@{2},{16}:{3}^2180000000000000:                                                                           
259,{28}:*{4}[{18}],{15}:@{2},{16}:*{6}[{24}]^2180000000018000:                                                                    
260,{28}:*{4}[{18}],{15}:@{2},{16}:*{6}++[{25}]^2180000000010000:                                                                  
261,{28}:*{4}[{18}],{15}:@{2},{16}:*{6}--[{26}]^2180000000010000:                                                                  
262,{28}:*{4}++[{19}],{15}:@{2},{16}:{3}^2100000000000000:                                                                         
263,{28}:*{4}++[{19}],{15}:@{2},{16}:*{6}[{24}]^2100000000018000:                                                                  
264,{28}:*{4}++[{19}],{15}:@{2},{16}:*{6}++[{25}]^2100000000010000:                                                                
265,{28}:*{4}++[{19}],{15}:@{2},{16}:*{6}--[{26}]^2100000000010000:                                                                
266,{28}:*{4}--[{20}],{15}:@{2},{16}:{3}^2100000000000000:                                                                         
267,{28}:*{4}--[{20}],{15}:@{2},{16}:*{6}[{24}]^2100000000018000:                                                                  
268,{28}:*{4}--[{20}],{15}:@{2},{16}:*{6}++[{25}]^2100000000010000:                                                                
269,{28}:*{4}--[{20}],{15}:@{2},{16}:*{6}--[{26}]^2100000000010000:                                                                
270,{28}:{1},{15}:{2},{16}:#{8}^1000000000000000:                                                                                  
271,{28}:{1},{15}:*{5}[{21}],{16}:#{8}^1000000800000000:                                                                           
272,{28}:{1},{15}:*{5}++[{22}],{16}:#{8}^1000000000000000:                                                                         
273,{28}:{1},{15}:*{5}--[{23}],{16}:#{8}^1000000000000000:                                                                         
274,{28}:*{4}[{18}],{15}:{2},{16}:#{8}^1180000000000000:                                                                           
275,{28}:*{4}[{18}],{15}:*{5}[{21}],{16}:#{8}^1180001800000000:                                                                    
276,{28}:*{4}[{18}],{15}:*{5}++[{22}],{16}:#{8}^1180001000000000:                                                                  
277,{28}:*{4}[{18}],{15}:*{5}--[{23}],{16}:#{8}^1180001000000000:                                                                  
278,{28}:*{4}++[{19}],{15}:{2},{16}:#{8}^1100000000000000:                                                                         
279,{28}:*{4}++[{19}],{15}:*{5}[{21}],{16}:#{8}^1100001800000000:                                                                  
280,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{16}:#{8}^1100001000000000:                                                                
281,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{16}:#{8}^1100001000000000:                                                                
282,{28}:*{4}--[{20}],{15}:{2},{16}:#{8}^1100000000000000:                                                                         
283,{28}:*{4}--[{20}],{15}:*{5}[{21}],{16}:#{8}^1100001800000000:                                                                  
284,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{16}:#{8}^1100001000000000:                                                                
285,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{16}:#{8}^1100001000000000:                                                                
286,{28}:{1},{15}:{2},{16}:{3}^0000000000000000:                                                                                   
287,{28}:{1},{15}:{2},{16}:*{6}[{24}]^0000000000018000:                                                                            
288,{28}:{1},{15}:{2},{16}:*{6}++[{25}]^0000000000010000:                                                                          
289,{28}:{1},{15}:{2},{16}:*{6}--[{26}]^0000000000010000:                                                                          
290,{28}:{1},{15}:*{5}[{21}],{16}:{3}^0000001800000000:                                                                            
291,{28}:{1},{15}:*{5}[{21}],{16}:*{6}[{24}]^0000001800008000:                                                                     
292,{28}:{1},{15}:*{5}[{21}],{16}:*{6}++[{25}]^0000001800000000:                                                                   
293,{28}:{1},{15}:*{5}[{21}],{16}:*{6}--[{26}]^0000001800000000:                                                                   
294,{28}:{1},{15}:*{5}++[{22}],{16}:{3}^0000001000000000:                                                                          
295,{28}:{1},{15}:*{5}++[{22}],{16}:*{6}[{24}]^0000001000018000:                                                                   
296,{28}:{1},{15}:*{5}++[{22}],{16}:*{6}++[{25}]^0000001000010000:                                                                 
297,{28}:{1},{15}:*{5}++[{22}],{16}:*{6}--[{26}]^0000001000010000:                                                                 
298,{28}:{1},{15}:*{5}--[{23}],{16}:{3}^0000001000000000:                                                                          
299,{28}:{1},{15}:*{5}--[{23}],{16}:*{6}[{24}]^0000001000018000:                                                                   
300,{28}:{1},{15}:*{5}--[{23}],{16}:*{6}++[{25}]^0000001000010000:                                                                 
301,{28}:{1},{15}:*{5}--[{23}],{16}:*{6}--[{26}]^0000001000010000:                                                                 
302,{28}:*{4}[{18}],{15}:{2},{16}:{3}^0080000000000000:                                                                            
303,{28}:*{4}[{18}],{15}:{2},{16}:*{6}[{24}]^0180000000018000:                                                                     
304,{28}:*{4}[{18}],{15}:{2},{16}:*{6}++[{25}]^0180000000010000:                                                                   
305,{28}:*{4}[{18}],{15}:{2},{16}:*{6}--[{26}]^0180000000010000:                                                                   
306,{28}:*{4}[{18}],{15}:*{5}[{21}],{16}:{3}^0180001800000000:                                                                     
307,{28}:*{4}[{18}],{15}:*{5}[{21}],{16}:*{6}[{24}]^0180001800018000:                                                              
308,{28}:*{4}[{18}],{15}:*{5}[{21}],{16}:*{6}++[{25}]^0180001800010000:                                                            
309,{28}:*{4}[{18}],{15}:*{5}[{21}],{16}:*{6}--[{26}]^0180001800010000:                                                            
310,{28}:*{4}[{18}],{15}:*{5}++[{22}],{16}:{3}^0180001000000000:                                                                   
311,{28}:*{4}[{18}],{15}:*{5}++[{22}],{16}:*{6}[{24}]^0180001000018000:                                                            
312,{28}:*{4}[{18}],{15}:*{5}++[{22}],{16}:*{6}++[{25}]^0180001000010000:                                                          
313,{28}:*{4}[{18}],{15}:*{5}++[{22}],{16}:*{6}--[{26}]^0180001000010000:                                                          
314,{28}:*{4}[{18}],{15}:*{5}--[{23}],{16}:{3}^0180001000000000:                                                                   
315,{28}:*{4}[{18}],{15}:*{5}--[{23}],{16}:*{6}[{24}]^0180001000018000:                                                            
316,{28}:*{4}[{18}],{15}:*{5}--[{23}],{16}:*{6}++[{25}]^0180001000010000:                                                          
317,{28}:*{4}[{18}],{15}:*{5}--[{23}],{16}:*{6}--[{26}]^0180001000010000:                                                          
318,{28}:*{4}++[{19}],{15}:{2},{16}:{3}^0100000000000000:                                                                          
319,{28}:*{4}++[{19}],{15}:{2},{16}:*{6}[{24}]^0100000000018000:                                                                   
320,{28}:*{4}++[{19}],{15}:{2},{16}:*{6}++[{25}]^0100000000010000:                                                                 
321,{28}:*{4}++[{19}],{15}:{2},{16}:*{6}--[{26}]^0100000000010000:                                                                 
322,{28}:*{4}++[{19}],{15}:*{5}[{21}],{16}:{3}^0100001800000000:                                                                   
323,{28}:*{4}++[{19}],{15}:*{5}[{21}],{16}:*{6}[{24}]^0100001800018000:                                                            
324,{28}:*{4}++[{19}],{15}:*{5}[{21}],{16}:*{6}++[{25}]^0100001800010000:                                                          
325,{28}:*{4}++[{19}],{15}:*{5}[{21}],{16}:*{6}--[{26}]^0100001800010000:                                                          
326,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{16}:{3}^0100001000000000:                                                                 
327,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{16}:*{6}[{24}]^0100001000018000:                                                          
328,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{16}:*{6}++[{25}]^0100001000010000:                                                        
329,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{16}:*{6}--[{26}]^0100001000010000:                                                        
330,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{16}:{3}^0100001000000000:                                                                 
331,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{16}:*{6}[{24}]^0100001000018000:                                                          
332,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{16}:*{6}++[{25}]^0100001000010000:                                                        
333,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{16}:*{6}--[{26}]^0100001000010000:                                                        
334,{28}:*{4}--[{20}],{15}:{2},{16}:{3}^0100000000000000:                                                                          
335,{28}:*{4}--[{20}],{15}:{2},{16}:*{6}[{24}]^0100000000018000:                                                                   
336,{28}:*{4}--[{20}],{15}:{2},{16}:*{6}++[{25}]^0100000000010000:                                                                 
337,{28}:*{4}--[{20}],{15}:{2},{16}:*{6}--[{26}]^0100000000010000:                                                                 
338,{28}:*{4}--[{20}],{15}:*{5}[{21}],{16}:{3}^0100001800000000:                                                                   
339,{28}:*{4}--[{20}],{15}:*{5}[{21}],{16}:*{6}[{24}]^0100001800018000:                                                            
340,{28}:*{4}--[{20}],{15}:*{5}[{21}],{16}:*{6}++[{25}]^0100001800010000:                                                          
341,{28}:*{4}--[{20}],{15}:*{5}[{21}],{16}:*{6}--[{26}]^0100001800010000:                                                          
342,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{16}:{3}^0100001000000000:                                                                 
343,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{16}:*{6}[{24}]^0100001000018000:                                                          
344,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{16}:*{6}++[{25}]^0100001000010000:                                                        
345,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{16}:*{6}--[{26}]^0100001000010000:                                                        
346,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{16}:{3}^0100001000000000:                                                                 
347,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{16}:*{6}[{24}]^0100001000018000:                                                          
348,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{16}:*{6}++[{25}]^0100001000010000:                                                        
349,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{16}:*{6}--[{26}]^0100001000010000:  
      
350,{28}:{1},{15}:{2},{13},{12}^1000000000000000:                     ;BTBS/C for use with conventional MOV, m or . assembly           
351,{28}:{1},{15}:*{5}[{21}],{13},{12}^1000001800000000:                                                                  
352,{28}:{1},{15}:*{5}++[{22}],{13},{12}^1000001000000000:                                    
353,{28}:{1},{15}:*{5}--[{23}],{13},{12}^1000001000000000:

354,{28}:{1},{15}:{2},{14},{17}^1000000000000000:                       ;SHIFT for use with conventional MOV, m or . assembly 
355,{28}:{1},{15}:*{5}[{21}],{14},{17}^1000001800000000:
356,{28}:{1},{15}:*{5}++[{22}],{14},{17}^1000001000000000:
357,{28}:{1},{15}:*{5}--[{23}],{14},{17}^1000001000000000:
358,{28}:*{4}[{18}],{15}:{2},{14},{17}^1180000000000000:
359,{28}:*{4}[{18}],{15}:*{5}[{21}],{14},{17}^1180001800000000:
360,{28}:*{4}[{18}],{15}:*{5}++[{22}],{14},{17}^1180001000000000:
361,{28}:*{4}[{18}],{15}:*{5}--[{23}],{14},{17}^1180001000000000:
362,{28}:*{4}++[{19}],{15}:{2},{14},{17}^1100000000000000:
363,{28}:*{4}++[{19}],{15}:*{5}[{21}],{14},{17}^1100001800000000:
364,{28}:*{4}++[{19}],{15}:*{5}++[{22}],{14},{17}^1100001000000000:
365,{28}:*{4}++[{19}],{15}:*{5}--[{23}],{14},{17}^1100001000000000:
366,{28}:*{4}--[{20}],{15}:{2},{14},{17}^1100000000000000:
367,{28}:*{4}--[{20}],{15}:*{5}[{21}],{14},{17}^1100001800000000:
368,{28}:*{4}--[{20}],{15}:*{5}++[{22}],{14},{17}^1100001000000000:
369,{28}:*{4}--[{20}],{15}:*{5}--[{23}],{14},{17}^1100001000000000:


370,{28}:{1},{15}:@{9}^2000000800000000:                              ;@table-read 32-bit mov address                                                                  
371,{28}:*{4}[{18}],{15}:@{9}^2180000800000000:                       ;IMOD for srcA set to indicate 32-bit direct @table-read address                                                                   
372,{28}:*{4}++[{19}],{15}:@{9}^2100000800000000:                                                                                        
373,{28}:*{4}--[{20}],{15}:@{9}^2100000800000000:  
                
374,{1}={11}:()^0000006FF8800000:            ;saveModes:() or any empty set will copy status register to destination
375,*{4}[{18}]={11}:()^0180000000000000:
376,*{4}++[{19}]={11}:()^0100000000000000:
377,*{4}--[{20}]={11}:()^0100000000000000:

378,({15}:{2})^0000000000000000:              ;mainly for restoreModes(ud:x), is...(uh:x) and class(uh:x)
379,({15}:*{5}[{21}])^0000001800000000:
380,({15}:*{5}++[{22}])^0000001000000000:
381,({15}:*{5}--[{23}])^0000001000000000:

382,{12}:(*SP[-16],*SP[-8])^0000000000000000:
383,{12}:(*SP[-24],*SP[-16],*SP[-8])^0000000000000000:

384,({15}:@{2},{16}:{3})^2000000000000000:                  ;mainly for compare(uh:x, uh:y), totalOrder and totalOrderMag
385,({15}:@{2},{16}:*{6}[{24}])^2000000000018000:
386,({15}:@{2},{16}:*{6}++[{25}])^2000000000010000:
387,({15}:@{2},{16}:*{6}--[{26}])^2000000000010000:
388,({15}:{2},{16}:#{8})^1000000000000000:
389,({15}:*{5}[{21}],{16}:#{8})^1000001800000000:
390,({15}:*{5}++[{22}],{16}:#{8})^1000001000000000:
391,({15}:*{5}--[{23}],{16}:#{8})^1000001000000000:
392,({15}:{2},{16}:{3})^0000000000000000:
393,({15}:{2},{16}:*{6}[{24}])^0000000000018000:
394,({15}:{2},{16}:*{6}++[{25}])^0000000000010000:
395,({15}:{2},{16}:*{6}--[{26}])^0000000000010000:
396,({15}:*{5}[{21}],{16}:{3})^0000001800000000:
397,({15}:*{5}[{21}],{16}:*{6}[{24}])^0000001800018000:
398,({15}:*{5}[{21}],{16}:*{6}++[{25}])^0000001800010000:
399,({15}:*{5}[{21}],{16}:*{6}--[{26}])^0000001800010000:
400,({15}:*{5}++[{22}],{16}:{3})^0000001000000000:
401,({15}:*{5}++[{22}],{16}:*{6}[{24}])^0000001000018000:
402,({15}:*{5}++[{22}],{16}:*{6}++[{25}])^0000001000010000:
403,({15}:*{5}++[{22}],{16}:*{6}--[{26}])^0000001000010000:
404,({15}:*{5}--[{23}],{16}:{3})^0000001000000000:
405,({15}:*{5}--[{23}],{16}:*{6}[{24}])^0000001000018000:
406,({15}:*{5}--[{23}],{16}:*{6}++[{25}])^0000001000010000:
407,({15}:*{5}--[{23}],{16}:*{6}--[{26}])^0000001000010000:
  
408,({16}:#{7})^1000000000000000:                    ;MOV#8

409,({15}:{2})^0000000000000000:                     ;mainly for restoreModes(ud:x), is...(uh:x) and class(uh:x)
410,({15}:*{5}[{21}])^0000001800000000:
411,({15}:*{5}++[{22}])^0000001000000000:
412,({15}:*{5}--[{23}])^0000001000000000:

413,(NEAREST)^0000000000000008:
414,(AWAY)^000000000000000C:
415,(POSITIVE)^0000000000000009:
416,(NEGATIVE)^000000000000000A:
417,(ZERO)^000000000000000B:

;for FMA only
418,{1}={11}:({15}:@{2},{16}:{3},{30})^2000000000000000:
419,{1}={11}:({15}:@{2},{16}:*{6}[{24}],{30})^2000000000018000:
420,{1}={11}:({15}:@{2},{16}:*{6}++[{25}],{30})^2000000000010000:
421,{1}={11}:({15}:@{2},{16}:*{6}--[{26}],{30})^2000000000010000:
422,*{4}[{18}]={11}:({15}:@{2},{16}:{3},{30})^2180000000000000:
423,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}[{24}],{30})^2180000000018000:
424,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}++[{25}],{30})^2180000000010000:
425,*{4}[{18}]={11}:({15}:@{2},{16}:*{6}--[{26}],{30})^2180000000010000:
426,*{4}++[{19}]={11}:({15}:@{2},{16}:{3},{30})^2100000000000000:
427,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}[{24}],{30})^2100000000018000:
428,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}++[{25}],{30})^2100000000010000:
429,*{4}++[{19}]={11}:({15}:@{2},{16}:*{6}--[{26}],{30})^2100000000010000:
430,*{4}--[{20}]={11}:({15}:@{2},{16}:{3},{30})^2100000000000000:
431,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}[{24}],{30})^2100000000018000:
432,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}++[{25}],{30})^2100000000010000:
433,*{4}--[{20}]={11}:({15}:@{2},{16}:*{6}--[{26}],{30})^2100000000010000:
434,{1}={11}:({15}:{2},{16}:#{8},{30})^1000000000000000:
435,{1}={11}:({15}:*{5}[{21}],{16}:#{8},{30})^1000001800000000:
436,{1}={11}:({15}:*{5}++[{22}],{16}:#{8},{30})^1000001000000000:
437,{1}={11}:({15}:*{5}--[{23}],{16}:#{8},{30})^1000001000000000:
438,*{4}[{18}]={11}:({15}:{2},{16}:#{8},{30})^1180000000000000:
439,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:#{8},{30})^1180001800000000:
440,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:#{8},{30})^1180001000000000:
441,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:#{8},{30})^1180001000000000:
442,*{4}++[{19}]={11}:({15}:{2},{16}:#{8},{30})^1100000000000000:
443,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:#{8},{30})^1100001800000000:
444,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:#{8},{30})^1100001000000000:
445,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:#{8},{30})^1100001000000000:
446,*{4}--[{20}]={11}:({15}:{2},{16}:#{8},{30})^1100000000000000:
447,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:#{8},{30})^1100001800000000:
448,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:#{8},{30})^1100001000000000:
449,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:#{8},{30})^1100001000000000:
450,{1}={11}:({15}:{2},{16}:{3},{30})^0000000000000000:
451,{1}={11}:({15}:{2},{16}:*{6}[{24}],{30})^0000000000018000:
452,{1}={11}:({15}:{2},{16}:*{6}++[{25}],{30})^0000000000010000:
453,{1}={11}:({15}:{2},{16}:*{6}--[{26}],{30})^0000000000010000:
454,{1}={11}:({15}:*{5}[{21}],{16}:{3},{30})^0000001800000000:
455,{1}={11}:({15}:*{5}[{21}],{16}:*{6}[{24}],{30})^0000001800018000:
456,{1}={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}],{30})^0000001800010000:
457,{1}={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}],{30})^0000001800010000:
458,{1}={11}:({15}:*{5}++[{22}],{16}:{3},{30})^0000001000000000:
459,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}],{30})^0000001000018000:
460,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}],{30})^0000001000010000:
461,{1}={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}],{30})^0000001000010000:
462,{1}={11}:({15}:*{5}--[{23}],{16}:{3},{30})^0000001000000000:
463,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}],{30})^0000001000018000:
464,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}],{30})^0000001000010000:
465,{1}={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}],{30})^0000001000010000:
466,*{4}[{18}]={11}:({15}:{2},{16}:{3},{30})^0180000000000000:
467,*{4}[{18}]={11}:({15}:{2},{16}:*{6}[{24}],{30})^0180000000018000:
468,*{4}[{18}]={11}:({15}:{2},{16}:*{6}++[{25}],{30})^0180000000010000:
469,*{4}[{18}]={11}:({15}:{2},{16}:*{6}--[{26}],{30})^0180000000010000:
470,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:{3},{30})^0180001800000000:
471,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}],{30})^0180001800018000:
472,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}],{30})^0180001800010000:
473,*{4}[{18}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}],{30})^0180001800010000:
474,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:{3},{30})^0180001000000000:
475,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}],{30})^0180001000018000:
476,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}],{30})^0180001000010000:
477,*{4}[{18}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}],{30})^0180001000010000:
478,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:{3},{30})^0180001000000000:
479,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}],{30})^0180001000018000:
480,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}],{30})^0180001000010000:
481,*{4}[{18}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}],{30})^0180001000010000:
482,*{4}++[{19}]={11}:({15}:{2},{16}:{3},{30})^0100000000000000:
483,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}[{24}],{30})^0100000000018000:
484,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}++[{25}],{30})^0100000000010000:
485,*{4}++[{19}]={11}:({15}:{2},{16}:*{6}--[{26}],{30})^0100000000010000:
486,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:{3},{30})^0100001800000000:
487,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}],{30})^0100001800018000:
488,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}],{30})^0100001800010000:
489,*{4}++[{19}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}],{30})^0100001800010000:
490,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:{3},{30})^0100001000000000:
491,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}],{30})^0100001000018000:
492,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}],{30})^0100001000010000:
493,*{4}++[{19}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}],{30})^0100001000010000:
494,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:{3},{30})^0100001000000000:
495,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}],{30})^0100001000018000:
496,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}],{30})^0100001000010000:
497,*{4}++[{19}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}],{30})^0100001000010000:
498,*{4}--[{20}]={11}:({15}:{2},{16}:{3},{30})^0100000000000000:
499,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}[{24}],{30})^0100000000018000:
500,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}++[{25}],{30})^0100000000010000:
501,*{4}--[{20}]={11}:({15}:{2},{16}:*{6}--[{26}],{30})^0100000000010000:
502,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:{3},{30})^0100001800000000:
503,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}[{24}],{30})^0100001800018000:
504,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}++[{25}],{30})^0100001800010000:
505,*{4}--[{20}]={11}:({15}:*{5}[{21}],{16}:*{6}--[{26}],{30})^0100001800010000:
506,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:{3},{30})^0100001000000000:
507,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}[{24}],{30})^0100001000018000:
508,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}++[{25}],{30})^0100001000010000:
509,*{4}--[{20}]={11}:({15}:*{5}++[{22}],{16}:*{6}--[{26}],{30})^0100001000010000:
510,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:{3},{30})^0100001000000000:
511,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}[{24}],{30})^0100001000018000:
512,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}++[{25}],{30})^0100001000010000:
513,*{4}--[{20}]={11}:({15}:*{5}--[{23}],{16}:*{6}--[{26}],{30})^0100001000010000:

514,{1}={11}:({16}:#{7})^1000000000000000:                   ;MOV#8
515,*{4}[{18}]={11}:({16}:#{7})^1080000000000000:            ;MOV#8
516,*{4}++[{19}]={11}:({16}:#{7})^1000000000000000:          ;MOV#8
517,*{4}--[{20}]={11}:({16}:#{7})^1000000000000000:          ;MOV#8
518,{1}={11}:({16}:#{8})^1000000000000000:                   ;MOV#16
519,*{4}[{18}]={11}:({16}:#{8})^1080000000000000:            ;MOV#16
520,*{4}++[{19}]={11}:({16}:#{8})^1000000000000000:          ;MOV#16
521,*{4}--[{20}]={11}:({16}:#{8})^1000000000000000:          ;MOV#16
522,{1}={11}:({15}:#{9})^3000000000000000:                   ;MOV#32
523,*{4}[{18}]={11}:({15}:#{9})^3080000000000000:            ;MOV#32
524,*{4}++[{19}]={11}:({15}:#{9})^3000000000000000:          ;MOV#32
525,*{4}--[{20}]={11}:({15}:#{9})^3000000000000000:          ;MOV#32

526,{15}:{2}:[{13}]==1)GOSUB:{12}^1CFFA00000000000:                      ;BTBS  gosub dest sign ext is signal          
527,{15}:*{5}[{21}]:[{13}]==1)GOSUB:{12}^1CFFA01800000000:                                     
528,{15}:*{5}++[{22}]:[{13}]==1)GOSUB:{12}^1CFFA01000000000:                                     
529,{15}:*{5}--[{23}]:[{13}]==1)GOSUB:{12}^1CFFA01000000000:

530,{15}:{2}:[{13}]==0)GOSUB:{12}^1CFF980000000000:                      ;BTBC  gosub dest sign ext is signal           
531,{15}:*{5}[{21}]:[{13}]==0)GOSUB:{12}^1CFF981800000000:                                         
532,{15}:*{5}++[{22}]:[{13}]==0)GOSUB:{12}^1CFF981000000000:                                         
533,{15}:*{5}--[{23}]:[{13}]==0)GOSUB:{12}^1CFF981000000000: 

534,()^0000000000000000:

535,{15}:{2},{13},{12}^1000000000000000:                     ;BTBS/C for use with "BTBS" or "BTBC" mnemonics          
536,{15}:*{5}[{21}],{13},{12}^1000001800000000:                                                                  
537,{15}:*{5}++[{22}],{13},{12}^1000001000000000:                                    
538,{15}:*{5}--[{23}],{13},{12}^1000001000000000:

 
;----------------------------------------------------------------
; SYMPL64 INTERMEDIATE LANGUAGE (IL) mnemonics definition section
;----------------------------------------------------------------

* ;Mnemonic Definition section, which includes just a few of the many possible aliases. 

;-----------------------------------------------------------------------------------------------------------
; MOV - the one and only true opcode--and it's implied, meaning that it has no encoding, since it is implied
;-----------------------------------------------------------------------------------------------------------

MOV|354-367^0000000000000000:                ;special MOV for shift operator                           
m|354-367^0000000000000000:                  ;special MOV for shift operator                           
.|354-367^0000000000000000:                  ;special MOV for shift operator                           

MOV|350-353^0000000000000000:                ;special MOV for bit-test and branch if set/clear operator                           
m|350-353^0000000000000000:                  ;special MOV for bit-test and branch if set/clear operator                           
.|350-353^0000000000000000:                  ;special MOV for bit-test and branch if set/clear operator                           

MOV|198-349^0000000000000000:                                                                                               
m|198-349^0000000000000000:                  ;another mnemonic for MOV                                                      
.|198-349^0000000000000000:                  ;yet another mnemonic for MOV   

MOV|370-373^0000000000000000:                                                                                               
m|370-373^0000000000000000:                  ;another mnemonic for MOV (single 32-bit address for srcA)                                                     
.|370-373^0000000000000000:                  ;yet another mnemonic for MOV (single 32-bit address for srcA)                                                  


;-----------------------------------------------------------------------------------------------
;  Data types definitions for DESTINATION with rounding mode (default rounding mode is "nearest")
;-----------------------------------------------------------------------------------------------

UB|1-4|17-168|514-517^0000000000000000:              ; unsigned byte  (8 bits)
UH|1-8|17-168|514-521^0200000000000000:              ; unsigned half-word (16 bits)
UW|1-12|17-176|514-525^0400000000000000:             ; unsigned word (32 bits)
UD|1-168|374-377|514-525^0600000000000000:           ; unsigned double-word (64 bits)
SB|1-4|17-168|514-517^0800000000000000:              ; signed byte  (8 bits)
SH|1-8|17-168|514-521^0A00000000000000:              ; signed half-word (16 bits)
SW|1-12|17-176|514-525^0C00000000000000:             ; signed word (32 bits)
SD|1-168|514-525^0E00000000000000:                   ; signed double-word (64 bits)
FH|418-513|1-8|17-168|514-521^0200000000000000:      ; half-precision float with round-to-nearest
FS|418-513|1-12|17-168|514-525^0400000000000000:     ; single-precision float with round-to-nearest
FD|418-513|1-168|514-525^0600000000000000:           ; double-precision float with round-to-nearest
FH.P|418-513|1-8|17-168|514-521^4200000000000000:    ; half-precision float with round-to-positive infinity 
FS.P|418-513|1-12|17-168|514-525^4400000000000000:   ; single-precision float with round-to-positive infinity
FD.P|418-513|1-168|514-525^4600000000000000:         ; double-precision float with round-to-positive infinity
FH.N|418-513|1-8|17-168|514-521^8200000000000000:    ; half-precision float with round-to-negative infinity 
FS.N|418-513|1-12|17-168|514-525^8400000000000000:   ; single-precision float with round-to-negative infinity
FD.N|418-513|1-168|514-525^8600000000000000:         ; double-precision float with round-to-negative infinity
FH.Z|418-513|1-8|17-168|514-521^C200000000000000:    ; half-precision float with round-to-zero
FS.Z|418-513|1-12|17-168|514-525^C400000000000000:   ; single-precision float with round-to-zero
FD.Z|418-513|1-168|514-525^C600000000000000:         ; double-precision float with round-to-zero

;for use with convertToInteger operators only
UH.E|1-8|17-168|514-521^1200000000000000:            ;inexact is not signaled       
UW.E|1-12|17-176|514-525^1400000000000000:                 
UD.E|1-168|514-525^1600000000000000:
SH.E|1-8|17-168|514-521^1A00000000000000:                  
SW.E|1-12|17-176|514-525^1C00000000000000:                 
SD.E|1-168|514-525^1E00000000000000:                
UH.A|1-8|17-168|514-521^1200000000000008:                  
UW.A|1-12|17-176|514-525^1400000000000008:                 
UD.A|1-168|514-525^1600000000000008:
SH.A|1-8|17-168|514-521^1A00000000000008:                  
SW.A|1-12|17-176|514-525^1C00000000000008:                 
SD.A|1-168|514-525^1E00000000000008:                
UH.P|1-8|17-168|514-521^1200000000000001:                  
UW.P|1-12|17-176|514-525^1400000000000001:                 
UD.P|1-168|514-525^1600000000000001:
SH.P|1-8|17-168|514-521^1A00000000000001:                  
SW.P|1-12|17-176|514-525^1C00000000000001:                 
SD.P|1-168|514-525^1E00000000000001:                
UH.N|1-8|17-168|514-521^1200000000000002:                  
UW.N|1-12|17-176|514-525^1400000000000002:                 
UD.N|1-168|514-525^1600000000000002:
SH.N|1-8|17-168|514-521^1A00000000000002:                  
SW.N|1-12|17-176|514-525^1C00000000000002:                 
SD.N|1-168|514-525^1E00000000000002:
UH.Z|1-8|17-168|514-521^1200000000000003:                   
UW.Z|1-12|17-176|514-525^1400000000000003:                  
UD.Z|1-168|514-525^1600000000000003: 
SH.Z|1-8|17-168|514-521^1A00000000000003:                   
SW.Z|1-12|17-176|514-525^1C00000000000003:                  
SD.Z|1-168|514-525^1E00000000000003:                 

UH.EX|1-8|17-168|514-521^1200000000000010:           ;inexact is signaled if result is inexact      
UW.EX|1-12|17-176|514-525^1400000000000010:                  
UD.EX|1-168|514-525^1600000000000010: 
SH.EX|1-8|17-168|514-521^1A00000000000010:                   
SW.EX|1-12|17-176|514-525^1C00000000000010:                  
SD.EX|1-168|514-525^1E00000000000010:                 
UH.AX|1-8|17-168|514-521^1200000000000018:                   
UW.AX|1-12|17-176|514-525^1400000000000018:                  
UD.AX|1-168|514-525^1600000000000018: 
SH.AX|1-8|17-168|514-521^1A00000000000018:                   
SW.AX|1-12|17-176|514-525^1C00000000000018:                  
SD.AX|1-168|514-525^1E00000000000018:                 
UH.PX|1-8|17-168|514-521^1200000000000011:                   
UW.PX|1-12|17-176|514-525^1400000000000011:                  
UD.PX|1-168|514-525^1600000000000011: 
SH.PX|1-8|17-168|514-521^1A00000000000011:                   
SW.PX|1-12|17-176|514-525^1C00000000000011:                  
SD.PX|1-168|514-525^1E00000000000011:                 
UH.NX|1-8|17-168|514-521^1200000000000012:                   
UW.NX|1-12|17-176|514-525^1400000000000012:                  
UD.NX|1-168|514-525^1600000000000012: 
SH.NX|1-8|17-168|514-521^1A00000000000012:                   
SW.NX|1-12|17-176|514-525^1C00000000000012:                  
SD.NX|1-168|514-525^1E00000000000012:
UH.ZX|1-8|17-168|514-521^1200000000000013:                    
UW.ZX|1-12|17-176|514-525^1400000000000013:                   
UD.ZX|1-168|514-525^1600000000000013:  
SH.ZX|1-8|17-168|514-521^1A00000000000013:                    
SW.ZX|1-12|17-176|514-525^1C00000000000013:                   
SD.ZX|1-168|514-525^1E00000000000013:                  

;these are for use with roundToIntegeral only
RH.E|418-513|1-8|17-168|514-521^1200000000000010:    ;no exceptions are signaled    
RS.E|418-513|1-12|17-168|514-525^1400000000000010:       
RD.E|418-513|1-168|514-525^1600000000000010:            
RH.A|418-513|1-8|17-168|514-521^1200000000000018:        
RS.A|418-513|1-12|17-168|514-525^1400000000000018:       
RD.A|418-513|1-168|514-525^1600000000000018:            
RH.P|418-513|1-8|17-168|514-521^1200000000000011:        
RS.P|418-513|1-12|17-168|514-525^1400000000000011:       
RD.P|418-513|1-168|514-525^1600000000000011:            
RH.N|418-513|1-8|17-168|514-521^1200000000000012:        
RS.N|418-513|1-12|17-168|514-525^1400000000000012:       
RD.N|418-513|1-168|514-525^1600000000000012:            
RH.Z|418-513|1-8|17-168|514-521^1200000000000013:        
RS.Z|418-513|1-12|17-168|514-525^1400000000000013:       
RD.Z|418-513|1-168|514-525^1600000000000013: 

ub.rdx|1-4|17-168|514-525^3000000000000002:      ;for use only with "radix" operator 
uh.rdx|1-8|17-168|514-525^3200000000000002:      ;for use only with "radix" operator 
uw.rdx|1-12|17-168|514-525^3400000000000002:     ;for use only with "radix" operator 
ud.rdx|1-168|514-525^3600000000000002:           ;for use only with "radix" operator 

;-----------------------------------------------------------------------------
; Alias MOV instructions that affect the PC and LOOP counters
;-----------------------------------------------------------------------------
                                                 
FOR (LPCNT0 = |177-182^04FF700000000000:
FOR (LPCNT1 = |177-182^04FF780000000000:
NEXT LPCNT0 GOTO: |183^14FFA04FF7040000:               ;test bit 16 of LPCNT0 for not zero. If 1, then load PC with short (12-bit) SrcB (relative) and decrement LPCNT0. Otherwise fall through 
NEXT LPCNT1 GOTO: |183^14FFA04FF7840000:               ;test bit 16 of LPCNT1 for not zero. If 1, then load PC with short (12-bit) SrcB (relative) and decrement LPCNT1. Otherwise fall through
GOTO|184^14FFA04FF887C000:                             ;btbs status bit 31 (branch relative always) alias
GOSUB|184|382-383^1CFFA04FF887C000:                    ;btbs status bit 31 (branch relative always) alias   dest sext is signal
RETURN^04FFA8D002700000:                               ;PC is loaded with 16-bit value from TOS alias   srcA sext is signal
BRA|184^14FFA04FF887C000:                              ;btbs status bit 31 (branch relative always) alias
NOP^14FFA04FF8878000:                                  ;btbs status bit 30 (branch relative never) alias
BTBS|535-538^14FFA00000000000:
BTBC|535-538^14FF980000000000:
BRAL|197^36FFF86000000000:                             ;relative unconditional long branch ALWAYS  alias
IF (Z==1) GOTO:|184^14FFA04FF8800000:                  ;test bit position (0) in status regFister for Z
IF (Z==0) GOTO:|184^14FF984FF8800000:                  ;test bit position (0) in status register for Z
IF (A==B) GOTO:|184^14FFA04FF8800000:                  ;test bit position (0) in status register for (A==B)
IF (A!=B) GOTO:|184^14FF984FF8800000:                  ;test bit position (0) in status register for (A!=B)
IF (C==1) GOTO:|184^14FFA04FF8804000:                  ;test bit position (1) in status register for C 
IF (C==0) GOTO:|184^14FF984FF8804000:                  ;test bit position (1) in status register for C 
IF (N==1) GOTO:|184^14FFA04FF8808000:                  ;test bit position (2) in status register for N
IF (N==0) GOTO:|184^14FF984FF8808000:                  ;test bit position (2) in status register for N
IF (V==1) GOTO:|184^14FFA04FF880C000:                  ;test bit position (3) in status register for V 
IF (V==0) GOTO:|184^14FF984FF880C000:                  ;test bit position (3) in status register for V 
IF (A<B)  GOTO:|184^14FFA04FF8874000:                  ;test bit position (28) in status register for ~Z & V
IF (A>=B) GOTO:|184^14FF984FF8874000:                  ;test bit position (28) in status register for ~Z & V
IF (A<=B) GOTO:|184^14FFA04FF8878000:                  ;test bit position (29) in status register for Z | V 
IF (A>B)  GOTO:|184^14FF984FF8878000:                  ;test bit position (29) in status register for Z | V 
IF (Z==1) GOSUB:|184^1CFFA04FF8800000:                 ;test bit position (0) in status register for Z
IF (Z==0) GOSUB:|184^1CFF984FF8800000:                 ;test bit position (0) in status register for Z
IF (A==B) GOSUB:|184^1CFFA04FF8800000:                 ;test bit position (0) in status register for (A==B)
IF (A!=B) GOSUB:|184^1CFF984FF8800000:                 ;test bit position (0) in status register for (A!=B)
IF (C==1) GOSUB:|184^1CFFA04FF8804000:                 ;test bit position (1) in status register for C 
IF (C==0) GOSUB:|184^1CFF984FF8804000:                 ;test bit position (1) in status register for C 
IF (N==1) GOSUB:|184^1CFFA04FF8808000:                 ;test bit position (2) in status register for N
IF (N==0) GOSUB:|184^1CFF984FF8808000:                 ;test bit position (2) in status register for N
IF (V==1) GOSUB:|184^1CFFA04FF880C000:                 ;test bit position (3) in status register for V 
IF (V==0) GOSUB:|184^1CFF984FF880C000:                 ;test bit position (3) in status register for V 
IF (A<B)  GOSUB:|184^1CFFA04FF8874000:                 ;test bit position (28) in status register for ~Z & V
IF (A>=B) GOSUB:|184^1CFF984FF8874000:                 ;test bit position (28) in status register for ~Z & V
IF (A<=B) GOSUB:|184^1CFFA04FF8878000:                 ;test bit position (29) in status register for Z | V 
IF (A>B)  GOSUB:|184^1CFF984FF8878000:                 ;test bit position (29) in status register for Z | V 
IF (754version1985) GOTO:|184^14FFA04FF887C000:        ;this is just another alias for BRA 
IF (754version2008) GOTO:|184^14FFA04FF887C000:        ;this is just another alias for BRA 
IF (signalingNaN) GOTO:|184^14FF984FF8880000:          ;test bit position (32) in status register for signalingNaN
IF (quietNaN) GOTO:|184^14FF984FF8884000:              ;test bit position (33)
IF (negativeInfinity) GOTO:|184^14FF984FF8888000:      ;test bit position (34)
IF (negativeNormal) GOTO:|184^14FF984FF888C000:        ;test bit position (35)
IF (negativeSubnormal) GOTO:|184^14FF984FF8890000:     ;test bit position (36)
IF (negativeZero) GOTO:|184^14FF984FF8894000:          ;test bit position (37)
IF (positiveZero) GOTO:|184^14FF984FF8898000:          ;test bit position (38)
IF (positiveSubnormal) GOTO:|184^14FF984FF889C000:     ;test bit position (39)
IF (positiveNormal) GOTO:|184^14FF984FF88A0000:        ;test bit position (40)
IF (positiveInfinity) GOTO:|184^14FF984FF88A4000:      ;test bit position (41)
IF (SignMinus) GOTO:|184^14FF984FF88A8000:             ;test bit position (42)
IF (Normal) GOTO:|184^14FF984FF88AC000:                ;test bit position (43)
IF (Finite) GOTO:|184^14FF984FF88B0000:                ;test bit position (44)
IF (Zero) GOTO:|184^14FF984FF88B4000:                  ;test bit position (45)
IF (Subnormal) GOTO:|184^14FF984FF88B8000:             ;test bit position (46)
IF (Infinite) GOTO:|184^14FF984FF88BC000:              ;test bit position (47)
IF (NaN) GOTO:|184^14FF984FF88C0000:                   ;test bit position (48)
IF (Signaling) GOTO:|184^14FF984FF88C4000:             ;test bit position (49)
IF (Canonical) GOTO:|184^14FF984FF88C8000:             ;test bit position (50)
IF (totalOrder) GOTO:|184^14FF984FF88CC000:            ;test bit position (51)
IF (totalOrderMag) GOTO:|184^14FF984FF88D0000:         ;test bit position (52)
IF (aFlagRaised) GOTO:|184^14FF984FF88D4000:           ;test bit position (53) used with testFlags and testSavedFlags (i.e., exception flags)
IF (compareTrue) GOTO:|184^14FF984FF88D8000:           ;test bit position (54) need only one flag
IF NOT(754version1985) GOTO:|184^14FFA04FF8878000:
IF NOT(754version2008) GOTO:|184^14FFA04FF8878000:
IF NOT(signalingNaN) GOTO:|184^14FFA04FF8880000:       ;test bit position (32);in status register for signalingNaN
IF NOT(quietNaN) GOTO:|184^14FFA04FF8884000:           ;test bit position (33)
IF NOT(negativeInfinity) GOTO:|184^14FFA04FF8888000:   ;test bit position (34)
IF NOT(negativeNormal) GOTO:|184^14FFA04FF888C000:     ;test bit position (35)
IF NOT(negativeSubnormal) GOTO:|184^14FFA04FF8890000:  ;test bit position (36)
IF NOT(negativeZero) GOTO:|184^14FFA04FF8894000:       ;test bit position (37)
IF NOT(positiveZero) GOTO:|184^14FFA04FF8898000:       ;test bit position (38)
IF NOT(positiveSubnormal) GOTO:|184^14FFA04FF889C000:  ;test bit position (39)
IF NOT(positiveNormal) GOTO:|184^14FFA04FF88A0000:     ;test bit position (40)
IF NOT(positiveInfinity) GOTO:|184^14FFA04FF88A4000:   ;test bit position (41)
IF NOT(SignMinus) GOTO:|184^14FFA04FF88A8000:          ;test bit position (42)
IF NOT(Normal) GOTO:|184^14FFA04FF88AC000:             ;test bit position (43)
IF NOT(Finite) GOTO:|184^14FFA04FF88B0000:             ;test bit position (44)
IF NOT(Zero) GOTO:|184^14FFA04FF88B4000:               ;test bit position (45)
IF NOT(Subnormal) GOTO:|184^14FFA04FF88B8000:          ;test bit position (46)
IF NOT(Infinite) GOTO:|184^14FFA04FF88BC000:           ;test bit position (47)
IF NOT(NaN)  GOTO:|184^14FFA04FF88C0000:               ;test bit position (48)
IF NOT(Signaling) GOTO:|184^14FFA04FF88C4000:          ;test bit position (49)
IF NOT(Canonical) GOTO:|184^14FFA04FF88C8000:          ;test bit position (50)
IF NOT(totalOrder) GOTO:|184^14FFA04FF88CC000:         ;test bit position (51)
IF NOT(totalOrderMag) GOTO:|184^14FFA04FF88D0000:      ;test bit position (52)
IF NOT(aFlagRaised) GOTO:|184^14FFA04FF88D4000:        ;test bit position (53) used with testFlags and testSavedFlags (i.e., exception flags)
IF NOT(compareTrue) GOTO:|184^14FFA04FF88D8000:        ;test bit position (54) need only one flag
IF (signalingNaN) GOSUB:|184^1CFF984FF8880000:          ;test bit position (32) GOSUB is distinquished from GOTO in the SEXT bit is set in GOSUB
IF (quietNaN) GOSUB:|184^1CFF984FF8884000:              ;test bit position (33)
IF (negativeInfinity) GOSUB:|184^1CFF984FF8888000:      ;test bit position (34)
IF (negativeNormal) GOSUB:|184^1CFF984FF888C000:        ;test bit position (35)
IF (negativeSubnormal) GOSUB:|184^1CFF984FF8890000:     ;test bit position (36)
IF (negativeZero) GOSUB:|184^1CFF984FF8894000:          ;test bit position (37)
IF (positiveZero) GOSUB:|184^1CFF984FF8898000:          ;test bit position (38)
IF (positiveSubnormal) GOSUB:|184^1CFF984FF889C000:     ;test bit position (39)
IF (positiveNormal) GOSUB:|184^1CFF984FF88A0000:        ;test bit position (40)
IF (positiveInfinity) GOSUB:|184^1CFF984FF88A4000:      ;test bit position (41)
IF (SignMinus) GOSUB:|184^1CFF984FF88A8000:             ;test bit position (42)
IF (Normal) GOSUB:|184^1CFF984FF88AC000:                ;test bit position (43)
IF (Finite) GOSUB:|184^1CFF984FF88B0000:                ;test bit position (44)
IF (Zero) GOSUB:|184^1CFF984FF88B4000:                  ;test bit position (45)
IF (Subnormal) GOSUB:|184^1CFF984FF88B8000:             ;test bit position (46)
IF (Infinite) GOSUB:|184^1CFF984FF88BC000:              ;test bit position (47)
IF (NaN) GOSUB:|184^1CFF984FF88C0000:                   ;test bit position (48)
IF (Signaling) GOSUB:|184^1CFF984FF88C4000:             ;test bit position (49)
IF (Canonical) GOSUB:|184^1CFF984FF88C8000:             ;test bit position (50)
IF (totalOrder) GOSUB:|184^1CFF984FF88CC000:            ;test bit position (51)
IF (totalOrderMag) GOSUB:|184^1CFF984FF88D0000:         ;test bit position (52)
IF (aFlagRaised) GOSUB:|184^1CFF984FF88D4000:           ;test bit position (53) 
IF (compareTrue) GOSUB:|184^1CFF984FF88D8000:           ;test bit position (54) 
IF NOT(signalingNaN) GOSUB:|184^1CFFA04FF8880000:       ;test bit position (32) 
IF NOT(quietNaN) GOSUB:|184^1CFFA04FF8884000:           ;test bit position (33)
IF NOT(negativeInfinity) GOSUB:|184^1CFFA04FF8888000:   ;test bit position (34)
IF NOT(negativeNormal) GOSUB:|184^1CFFA04FF888C000:     ;test bit position (35)
IF NOT(negativeSubnormal) GOSUB:|184^1CFFA04FF8890000:  ;test bit position (36)
IF NOT(negativeZero) GOSUB:|184^1CFFA04FF8894000:       ;test bit position (37)
IF NOT(positiveZero) GOSUB:|184^1CFFA04FF8898000:       ;test bit position (38)
IF NOT(positiveSubnormal) GOSUB:|184^1CFFA04FF889C000:  ;test bit position (39)
IF NOT(positiveNormal) GOSUB:|184^1CFFA04FF88A0000:     ;test bit position (40)
IF NOT(positiveInfinity) GOSUB:|184^1CFFA04FF88A4000:   ;test bit position (41)
IF NOT(SignMinus) GOSUB:|184^1CFFA04FF88A8000:          ;test bit position (42)
IF NOT(Normal) GOSUB:|184^1CFFA04FF88AC000:             ;test bit position (43)
IF NOT(Finite) GOSUB:|184^1CFFA04FF88B0000:             ;test bit position (44)
IF NOT(Zero) GOSUB:|184^1CFFA04FF88B4000:               ;test bit position (45)
IF NOT(Subnormal) GOSUB:|184^1CFFA04FF88B8000:          ;test bit position (46)
IF NOT(Infinite) GOSUB:|184^1CFFA04FF88BC000:           ;test bit position (47)
IF NOT(NaN)  GOSUB:|184^1CFFA04FF88C0000:               ;test bit position (48)
IF NOT(Signaling) GOSUB:|184^1CFFA04FF88C4000:          ;test bit position (49)
IF NOT(Canonical) GOSUB:|184^1CFFA04FF88C8000:          ;test bit position (50)
IF NOT(totalOrder) GOSUB:|184^1CFFA04FF88CC000:         ;test bit position (51)
IF NOT(totalOrderMag) GOSUB:|184^1CFFA04FF88D0000:      ;test bit position (52)
IF NOT(aFlagRaised) GOSUB:|184^1CFFA04FF88D4000:        ;test bit position (53) 
IF NOT(compareTrue) GOSUB:|184^1CFFA04FF88D8000:        ;test bit position (54) 
IF (|189-196|526-533^1400000000000000:                  ;btbs or btbc
REPEAT|185-188^02FF800000000000:                        ;MOV srcA to location 0xFF80 (repeat counter)
compareSignalingEqual|384-407^00FF1F0000000000:              
cmpSE|384-407^00FF1F0000000000:              
compareQuietEqual|384-407^00FF1E0000000000:                  
cmpQE|384-407^00FF1E0000000000:                  
compareSignalingNotEqual|384-407^00FF1D0000000000:           
cmpSNE|384-407^00FF1D0000000000:           
compareQuietNotEqual|384-407^00FF1C0000000000:               
cmpQNE|384-407^00FF1C0000000000:               
compareSignalingGreater|384-407^00FF1B0000000000:            
cmpSG|384-407^00FF1B0000000000:            
compareQuietGreater|384-407^00FF1A0000000000:                
cmpQG|384-407^00FF1A0000000000:                
compareSignalingGreaterEqual|384-407^00FF190000000000:       
cmpSGE|384-407^00FF190000000000:       
compareQuietGreaterEqual|384-407^00FF180000000000:           
cmpQGE|384-407^00FF180000000000:           
compareSignalingLess|384-407^00FF170000000000:               
cmpSL|384-407^00FF170000000000:               
compareQuietLess|384-407^00FF160000000000:                   
cmpQL|384-407^00FF160000000000:                   
compareSignalingLessEqual|384-407^00FF150000000000:          
cmpSLE|384-407^00FF150000000000:          
compareQuietLessEqual|384-407^00FF140000000000:              
cmpQLE|384-407^00FF140000000000:              
compareSignalingNotGreater|384-407^00FF130000000000:         
cmpSNG|384-407^00FF130000000000:         
compareQuietNotGreater|384-407^00FF120000000000:             
cmpQNG|384-407^00FF120000000000:             
compareSignalingLessUnordered|384-407^00FF110000000000:      
cmpSLU|384-407^00FF110000000000:      
compareQuietLessUnordered|384-407^00FF100000000000:          
cmpQLU|384-407^00FF100000000000:          
compareSignalingNotLess|384-407^00FF0F0000000000:            
cmpSNL|384-407^00FF0F0000000000:            
compareQuietNotLess|384-407^00FF0E0000000000:                
cmpQNL|384-407^00FF0E0000000000:                
compareSignalingGreaterUnordered|384-407^00FF0D0000000000:   
cmpSGU|384-407^00FF0D0000000000:   
compareQuietGreaterUnordered|384-407^00FF0C0000000000:          
cmpQGU|384-407^00FF0C0000000000:          
compareQuietUnordered|384-407^00FF0B0000000000:         
cmpQU|384-407^00FF0B0000000000:         
compareQuietOrdered|384-407^00FF0A0000000000: 
cmpQO|384-407^00FF0A0000000000: 
is754version1985|534^0000010000000000:
is754version2008|534^0000020000000000:
isSignMinus|409-412^10FF090000000001: 
isNormal|409-412^10FF090000000002:              
isFinite|409-412^10FF090000000004:              
isZero|409-412^10FF090000000008:                
isSubnormal|409-412^10FF090000000010:                        
isInfinite|409-412^10FF090000000020:          
isNaN|409-412^10FF090000000040:               
isSignaling|409-412^10FF090000000080:         
isCanonical|409-412^10FF090000000100:
totalOrder|384-407^00FF070000000000:    
totalOrderMag|384-407^00FF060000000000:   
getBinaryRoundingDirection|534^00FE180FF8800000:                                  
setBinaryRoundingDirection|413-417^12FF8F0000000000:  ;byte 3 (starting from 0)  --must have uh in dest (code 2)
lowerFlags|378-381|408^00FF050000000000:
raiseFlags|378-381|408^00FF040000000000:
raiseNoFlag|378-381|408^02FF8A0000000000:
default|378-381|408^04FF8A0000000000:
raiseSignals|378-381|408^02FF8B0000000000:
lowerSignals|378-381|408^04FF8B0000000000:
testFlags|378-381|408^00FF030000000000:               ;can be @, *, dir, or #
testSavedFlags|384-407^00FF020000000000:
restoreFlags|384-407^00FF010000000000:
saveAllFlags|534^00FF006FF8800000:
defaultModes|534^00FF8F0000000000:                    ;writing a byte to the 4th byte of status register sets flags to default state
restoreModes|378-381|408^02FF8F0000000000:           
saveModes|534^00FE086FF8800000:
enableAltImmediateHandlers|378-381|408^04FF8D0000000000:
disableAltImmediateHandlers|378-381|408^02FF8D0000000000:
enableInt^12FF8C000020C00:
disableInt^12FF8C0000020800:
setDone^12FF8C0000020300:
clearDone^12FF8C0000020200:
setV^12FF8C00000200C0:
clearV^12FF8C0000020080:
setN^12FF8C0000020030:
clearN^12FF8C0000020020:
setC^12FF8C000002000C:
clearC^12FF8C0000020008:
setZ^12FF8C0000020003:
clearZ^12FF8C0000020002:
setSubsInexact^12FF8E0000000300:
clearSubsInexact^12FF8E0000000200:
setSubssubsUnderflow^12FF8E00000000C0:
clearSubssubsUnderflow^12FF8E0000000080:
setsubsOverflow^12FF8E0000000030:
clearsubsOverflow^12FF8E0000000020:
setsubsDivByZero^12FF8E000000000C:
clearsubsDivByZero^12FF8E0000000008:
setsubsInvalid^12FF8E0000000003:
clearsubsInvalid^12FF8E0000000002:
compare|384-407^00FF890000000000: 
cmp|384-407^00FF890000000000:

*   ;equates section
;-------------------------------------------------------------------------------------
;   Defined/adopted operator names--used for annotation
;   the destination address is the operator, not the mneumonic preceding the operand(s) 
;-------------------------------------------------------------------------------------

addition:                             EQU     0x0                                                                                               
subtraction:                          EQU     0x0                                                                                                
multiplication:                       EQU     0x0                                                                                                
division:                             EQU     0x0                                                                                               
fusedMultiplyAdd:                     EQU     0x0
squareRoot:                           EQU     0x0
remainder:                            EQU     0x0
logB:                                 EQU     0x0
scaleB:                               EQU     0x0
convertFromBinaryToASCII              EQU     0x0
convertToBinaryFromASCII              EQU     0x0
convertFormat:                        EQU     0x0
convertFromInt:                       EQU     0x0
convertToIntegerTiesToEven:           EQU     0x0
convertToIntegerTowardZero:           EQU     0x0
convertToIntegerTowardPositive:       EQU     0x0
convertToIntegerTowardNegative:       EQU     0x0
convertToIntegerTiesToAway:           EQU     0x0
convertToIntegerExactTiesToEven:      EQU     0x0
convertToIntegerExactTowardZero:      EQU     0x0
convertToIntegerExactTowardPositive:  EQU     0x0
convertToIntegerExactTowardNegative:  EQU     0x0
convertToIntegerExactTiesToAway:      EQU     0x0
roundToIntegralTiesToEven:            EQU     0x0
roundToIntegralTiesToAway:            EQU     0x0
roundToIntegralTowardZero:            EQU     0x0
roundToIntegralTowardPositive:        EQU     0x0
roundToIntegralTowardNegative:        EQU     0x0
roundToIntegralExact:                 EQU     0x0
nextUp:                               EQU     0x0
nextDown:                             EQU     0x0
minNum:                               EQU     0x0
maxNum:                               EQU     0x0
minNumMag:                            EQU     0x0
minNumMag:                            EQU     0x0
copy:                                 EQU     0x0
negate:                               EQU     0x0
abs:                                  EQU     0x0
copySign:                             EQU     0x0
class:                                EQU     0x0

isSignMinus:     EQU     0x0  ; all is(es) share the same location in the register file and must be followed by BTB S/C 
isNormal:        EQU     0x0  ; for example if (SignMinus) then GOTO
isFinite:        EQU     0x0  ;               if NOT(SignMinus) then GOTO
isZero:          EQU     0x0  ;               if (Zero) then GOTO
isSubnormal:     EQU     0x0  ;               if NOT(Zero) then GOTO
isInfinite:      EQU     0x0
isNaN:           EQU     0x0
isSignaling:     EQU     0x0
isCanonical:     EQU     0x0

radix:           EQU     0x0  ; radix(x) is the radix b of the format of x, that is, two or ten.
                              ; always returns immediate 2
lowerFlags:      EQU     0x0
raiseFlags:      EQU     0x0
testFlags:       EQU     0x0
testSavedFlags:  EQU     0x0
restoreFlags:    EQU     0x0
saveAllFlags:    EQU     0x0  ; Returns a representation of the state of all status flags.
saveModes:       EQU     0x0

convertFromHexCharacter:      EQU     0x0
convertToHexCharacter:        EQU     0x0
convertFromDecimalCharacter:  EQU     0x0
convertToDecimalCharacter:    EQU     0x0

log:  EQU 0x0
exp:  EQU 0x0
pow:  EQU 0x0
pown: EQU 0x0
powr: EQU 0x0


MOV:        EQU     0x0
AND:        EQU     0x0
OR:         EQU     0x0
XOR:        EQU     0x0
ENDI:       EQU     0x0
BSET:       EQU     0x0
BCLR:       EQU     0x0
BTBS:       EQU     0x0
BTBC:       EQU     0x0
DBNZ:       EQU     0x0
BCND:       EQU     0x0
SHIFT:      EQU     0x0
SHFT:       EQU     0x0
ADD:        EQU     0x0
ADDC:       EQU     0x0
SUB:        EQU     0x0
SUBB:       EQU     0x0
MUL:        EQU     0x0
DIV:        EQU     0x0
MIN:        EQU     0x0
MAX:        EQU     0x0
SIND:       EQU     0x0
COSD:       EQU     0x0
TAND:       EQU     0x0
COTD:       EQU     0x0
BUBL:       EQU     0x0        ;bubble sort operator--automatically sorts 16-entry list--best used with REPEAT alias when loading/unloading list

;-----------------------------------------------------------------------------
;   Data type specifiers for SOURCE operands A and B
;-----------------------------------------------------------------------------

UB:         EQU     0x0        ;unsigned byte 
UH:         EQU     0x1        ;unsigned half-word (16 bits)
UW:         EQU     0x2        ;unsigned word (32 bits)
UD:         EQU     0x3        ;unsigned double-word (64 bits)
SB:         EQU     0x4        ;signed byte 
SH:         EQU     0x5        ;signed half-word (16 bits)
SW:         EQU     0x6        ;signed word (32 bits)
SD:         EQU     0x7        ;signed double-word (64 bits)
FH:         EQU     0x1        ;float half-precision
FS:         EQU     0x2        ;float single-precision
FD:         EQU     0x3        ;float double-precision
XFH:        EQU     0x5        ;float half-precision (signal extra function)
XFS:        EQU     0x6        ;float single-precision (signal extra function)
XFD:        EQU     0x7        ;float double-precision (signal extra function)

;--------------------------------------------------------------------------           
;         internal memory-mapped h/w registers
;--------------------------------------------------------------------------

PC_REL:     EQU     0xFFF8     ;load PC with unconditional 32-bit relative branch value
SP_TOS:     EQU     0xFFF0     ;reading this location will return the contents at the top of stack without affecting SP
SP:         EQU     0xFFE8     ;stack pointer
AR6:        EQU     0xFFE0     ;Auxiliary Reg 6
AR5:        EQU     0xFFD8     ;Auxiliary Reg 5
AR4:        EQU     0xFFD0     ;Auxiliary Reg 4
AR3:        EQU     0xFFC8     ;Auxiliary Reg 3
AR2:        EQU     0xFFC0     ;Auxiliary Reg 2
AR1:        EQU     0xFFB8     ;Auxiliary Reg 1
AR0:        EQU     0xFFB0     ;Auxiliary Reg 0
PC:         EQU     0xFFA8     ;Program Counter
PCS:        EQU     0xFFA0     ;conditional load PC "set" with 14-bit relative branch value
PCC:        EQU     0xFF98     ;conditional load PC "clear" with 14-bit relative branch value
PC_COPY:    EQU     0xFF90     ;anytime a PC discontinuity happens, a copy of the original is automatically placed here
STATUS:     EQU     0xFF88     ;Status Register
RPT:        EQU     0xFF80     ;repeat counter location
LPCNT1:     EQU     0xFF78     ;H/W loop counter 1
LPCNT0:     EQU     0xFF70     ;H/W loop counter 0
TIMER:      EQU     0xFF68     ;timer
                    
CREG:       EQU     0xFF60     ;CREG for FMA and DOT
CAPTURE3:   EQU     0xFF58     ;alternate delayed exception capture register 3
CAPTURE2:   EQU     0xFF50     ;alternate delayed exception capture register 2
CAPTURE1:   EQU     0xFF48     ;alternate delayed exception capture register 1
CAPTURE0:   EQU     0xFF40     ;alternate delayed exception capture register 0

SCHEDULER:  EQU     0xFF38
SCHEDCMP:   EQU     0xFF30
compare:    EQU     0xFF2F     ;integer compare(A,B)

cmpSE:      EQU     0xFF1F     ;cmpSE  byte address compareSignalingEqual(source1, source2)           
cmpQE:      EQU     0xFF1E     ;cmpQE   byte address compareQuietEqual(source1, source2)               
cmpSNE:     EQU     0xFF1D     ;cmpSNE  byte address compareSignalingNotEqual(source1, source2)        
cmpQNE:     EQU     0xFF1C     ;cmpQNE  byte address compareQuietNotEqual(source1, source2)            
cmpSG:      EQU     0xFF1B     ;cmpSG  byte address compareSignalingGreater(source1, source2)         
cmpQG:      EQU     0xFF1A     ;cmpQG  byte address compareQuietGreater(source1, source2)             
cmpSGE:     EQU     0xFF19     ;cmpSGE  byte address compareSignalingGreaterEqual(source1, source2)    
cmpQGE:     EQU     0xFF18     ;cmpQGE  byte address compareQuietGreaterEqual(source1, source2)        
cmpSL:      EQU     0xFF17     ;cmpSL  byte address compareSignalingLess(source1, source2)            
cmpQL:      EQU     0xFF16     ;cmpQL  byte address compareQuietLess(source1, source2)                
cmpSLE:     EQU     0xFF15     ;cmpSLE  byte address compareSignalingLessEqual(source1, source2)       
cmpQLE:     EQU     0xFF14     ;cmpQLE  byte address compareQuietLessEqual(source1, source2)           
cmpSNG:     EQU     0xFF13     ;cmpSNG  byte address compareSignalingNotGreater(source1, source2)      
cmpQNG:     EQU     0xFF12     ;cmpQNG  byte address compareQuietNotGreater(source1, source2)          
cmpSLU:     EQU     0xFF11     ;cmpSLU  byte address compareSignalingLessUnordered(source1, source2)   
cmpQLU:     EQU     0xFF10     ;cmpQLU  byte address compareQuietLessUnordered(source1, source2)       
cmpSNL:     EQU     0xFF0F     ;cmpSNL  byte address compareSignalingNotLess(source1, source2)         
cmpQNL:     EQU     0xFF0E     ;cmpQNL  byte address compareQuietNotLess(source1, source2)             
cmpSGU:     EQU     0xFF0D     ;cmpSGU  byte address compareSignalingGreaterUnordered(source1, source2)
cmpQGU:     EQU     0xFF0C     ;cmpQGU  byte address compareQuietGreaterUnordered(source1, source2)    
cmpQU:      EQU     0xFF0B     ;cmpQU  byte address compareQuietUnordered(source1, source2) 
cmpQO:      EQU     0xFF0A     ;cmpQO  byte address compareQuietOrdered(source1, source2)             
is:         EQU     0xFF09     ;all the is(es) go here          
clas:       EQU     0xFF08     ;class(x)--clas is a 1-byte readable register at this location
tOrd:       EQU     0xFF07     ;total order
tOrdM:      EQU     0xFF06     ;total order magnitude           
lowFlg:     EQU     0xFF05                                      
rasFlg:     EQU     0xFF04     
tstFlg:     EQU     0xFF03                                            
tstSFlg:    EQU     0xFF02                                                        
rstFlg:     EQU     0xFF01
savedFlags: EQU     0xFF00                                            
                                         
NMI_VECT:   EQU     0xFEF8                                      
IRQ_VECT:   EQU     0xFEF0                                      
INV_VECT:   EQU     0xFEE8                                      
DIVx0_VECT: EQU     0xFEE0
OVFL_VECT:  EQU     0xFED8
UNFL_VECT:  EQU     0xFED0
INEXT_VECT: EQU     0xFEC8
RNDDIR_REG: EQU     0xFE18
RADIX_ADDRS: EQU    0xFE10
savedModes: EQU     0xFE08
MONITR_REG: EQU     0xFE00


;--------------------------------------------------------------------------
;Aliases for PCS (btbs) PCC (btbc)
;--------------------------------------------------------------------------

BTBS:       EQU     PCS                             ;bit test and branch if bit is set
BTBC:       EQU     PCC                             ;bit test and branch if bit is clear

;--------------------------------------------------------------------------
;STATUS Register flags and respective bit positions
;--------------------------------------------------------------------------

;0xFF8F            
RM_attrib:         EQU 63     ;0=use 2-bit RM code in instruction; 1=force all rounding according to specifier code in bits 23 and 24
AWAY:              EQU 62     ;0=default is round nearest even; 1=default is round Away; 
RM1:               EQU 61     ;msb of forced rounding mode
RM0:               EQU 60     ;lsb of forced rounding mode    00=default, 01=positive, 10=negative, 11=zero
subs_NXACT:        EQU 59
subs_UNFL:         EQU 58
subs_OVFL:         EQU 57
subs_DIVBY0:       EQU 56

;0xFF8E                                                             
subs_INV:          EQU 55
compareTrue:       EQU 54
aFlagRaised:       EQU 53
totlOrderMag:      EQU 52
totlOrder:         EQU 51
Canonical:         EQU 50                                           
Signaling:         EQU 49                                           
NaN:               EQU 48                                           

;0xFF8D
Infinite:          EQU 47
Subnormal:         EQU 46
Zero:              EQU 45
Finite:            EQU 44
Normal:            EQU 43
SignMinus:         EQU 42
positiveInfinity:  EQU 41
positiveNormal:    EQU 40
                                                                    
;0xFF8C                                                
positiveSubnormal: EQU 39
positiveZero:      EQU 38
negativeZero:      EQU 37
negativeSubnormal: EQU 36
negativeNormal:    EQU 35
negativeInfinity:  EQU 34
quietNaN:          EQU 33
signalingNaN:      EQU 32                       

;0xFF8B
ALWAYS:            EQU 31                       
NEVER:             EQU 30                       
ZorV:              EQU 29
notZandV:          EQU 28
IRQ:               EQU 27
IRQEN:             EQU 26 
NXACTsignal:       EQU 25
UNFLsignal:        EQU 24

;0xFF8A
OVFLsignal:        EQU 23
DIVBY0signal:      EQU 22
INVsignal:         EQU 21
RNF_NXACT:         EQU 20
RNF_UNFL:          EQU 19
RNF_OVFL:          EQU 18
RNF_DIVBY0:        EQU 17
RNF_INV:           EQU 16

;0xFF89
AltImmInexact:     EQU 15
AltImmUnderflow:   EQU 14
AltImmOverflow:    EQU 13
AltImmDivByZero:   EQU 12
AltImmInvalid:     EQU 11
NXACTflag:         EQU 10
UNFLflag:          EQU 9
OVFLflag:          EQU 8

;0xFF88
DIVBY0flag:        EQU 7   
INVflag:           EQU 6   
ExcSource:         EQU 5   ;source of an exception signal 0=operandA 1=operandB
DONE_bit:          EQU 4
V:                 EQU 3
N:                 EQU 2
C:                 EQU 1
Z:                 EQU 0

invalid:           equ 0x01
divByZero:         equ 0x02
overflow:          equ 0x04
underflow:         equ 0x08
inexact:           equ 0x10

bit63: equ 63
bit62: equ 62
bit61: equ 61
bit60: equ 60
bit59: equ 59
bit58: equ 58
bit57: equ 57
bit56: equ 56
bit55: equ 55
bit54: equ 54
bit53: equ 53
bit52: equ 52
bit51: equ 51
bit50: equ 50
bit49: equ 49
bit48: equ 48
bit47: equ 47
bit46: equ 46
bit45: equ 45
bit44: equ 44
bit43: equ 43
bit42: equ 42
bit41: equ 41
bit40: equ 40
bit39: equ 39
bit38: equ 38
bit37: equ 37
bit36: equ 36
bit35: equ 35
bit34: equ 34
bit33: equ 33
bit32: equ 32
bit31: equ 31
bit30: equ 30
bit29: equ 29
bit28: equ 28
bit27: equ 27
bit26: equ 26
bit25: equ 25
bit24: equ 24
bit23: equ 23
bit22: equ 22
bit21: equ 21
bit20: equ 20
bit19: equ 19
bit18: equ 18
bit17: equ 17
bit16: equ 16
bit15: equ 15
bit14: equ 14
bit13: equ 13
bit12: equ 12
bit11: equ 11
bit10: equ 10
bit9:  equ  9
bit8:  equ  8
bit7:  equ  7
bit6:  equ  6
bit5:  equ  5
bit4:  equ  4
bit3:  equ  3
bit2:  equ  2
bit1:  equ  1
bit0:  equ  0
                    
;--------------------------------------------------------------------------
;FP OPERATOR memory-mapped addresses and corresponding results storage bins
;--------------------------------------------------------------------------
FADD.15:     EQU     0xEEF8
FADD.14:     EQU     0xEEF0
FADD.13:     EQU     0xEEE8
FADD.12:     EQU     0xEEE0
FADD.11:     EQU     0xEED8
FADD.10:     EQU     0xEED0
FADD.9:      EQU     0xEEC8
FADD.8:      EQU     0xEEC0
FADD.7:      EQU     0xEEB8
FADD.6:      EQU     0xEEB0
FADD.5:      EQU     0xEEA8
FADD.4:      EQU     0xEEA0
FADD.3:      EQU     0xEE98
FADD.2:      EQU     0xEE90
FADD.1:      EQU     0xEE88
FADD.0:      EQU     0xEE80

FSUB.15:     EQU     0xEE78
FSUB.14:     EQU     0xEE70
FSUB.13:     EQU     0xEE68
FSUB.12:     EQU     0xEE60
FSUB.11:     EQU     0xEE58
FSUB.10:     EQU     0xEE50
FSUB.9:      EQU     0xEE48
FSUB.8:      EQU     0xEE40
FSUB.7:      EQU     0xEE38
FSUB.6:      EQU     0xEE30
FSUB.5:      EQU     0xEE28
FSUB.4:      EQU     0xEE20
FSUB.3:      EQU     0xEE18
FSUB.2:      EQU     0xEE10
FSUB.1:      EQU     0xEE08
FSUB.0:      EQU     0xEE00
                        
FMUL.15:     EQU     0xEDF8
FMUL.14:     EQU     0xEDF0
FMUL.13:     EQU     0xEDE8
FMUL.12:     EQU     0xEDE0
FMUL.11:     EQU     0xEDD8
FMUL.10:     EQU     0xEDD0
FMUL.9:      EQU     0xEDC8
FMUL.8:      EQU     0xEDC0
FMUL.7:      EQU     0xEDB8
FMUL.6:      EQU     0xEDB0
FMUL.5:      EQU     0xEDA8
FMUL.4:      EQU     0xEDA0
FMUL.3:      EQU     0xED98
FMUL.2:      EQU     0xED90
FMUL.1:      EQU     0xED88
FMUL.0:      EQU     0xED80

ITOF.15:     EQU     0xED78
ITOF.14:     EQU     0xED70
ITOF.13:     EQU     0xED68
ITOF.12:     EQU     0xED60
ITOF.11:     EQU     0xED58
ITOF.10:     EQU     0xED50
ITOF.9:      EQU     0xED48
ITOF.8:      EQU     0xED40
ITOF.7:      EQU     0xED38
ITOF.6:      EQU     0xED30
ITOF.5:      EQU     0xED28
ITOF.4:      EQU     0xED20
ITOF.3:      EQU     0xED18
ITOF.2:      EQU     0xED10
ITOF.1:      EQU     0xED08
ITOF.0:      EQU     0xED00

FTOI.15:     EQU     0xECF8
FTOI.14:     EQU     0xECF0
FTOI.13:     EQU     0xECE8
FTOI.12:     EQU     0xECE0
FTOI.11:     EQU     0xECD8
FTOI.10:     EQU     0xECD0
FTOI.9:      EQU     0xECC8
FTOI.8:      EQU     0xECC0
FTOI.7:      EQU     0xECB8
FTOI.6:      EQU     0xECB0
FTOI.5:      EQU     0xECA8
FTOI.4:      EQU     0xECA0
FTOI.3:      EQU     0xEC98
FTOI.2:      EQU     0xEC90
FTOI.1:      EQU     0xEC88
FTOI.0:      EQU     0xEC80

FDIV.15:     EQU     0xEC78
FDIV.14:     EQU     0xEC70
FDIV.13:     EQU     0xEC68
FDIV.12:     EQU     0xEC60
FDIV.11:     EQU     0xEC58
FDIV.10:     EQU     0xEC50
FDIV.9:      EQU     0xEC48
FDIV.8:      EQU     0xEC40
FDIV.7:      EQU     0xEC38
FDIV.6:      EQU     0xEC30
FDIV.5:      EQU     0xEC28
FDIV.4:      EQU     0xEC20
FDIV.3:      EQU     0xEC18
FDIV.2:      EQU     0xEC10
FDIV.1:      EQU     0xEC08
FDIV.0:      EQU     0xEC00

SQRT.15:     EQU     0xEBF8
SQRT.14:     EQU     0xEBF0
SQRT.13:     EQU     0xEBE8
SQRT.12:     EQU     0xEBE0
SQRT.11:     EQU     0xEBD8
SQRT.10:     EQU     0xEBD0
SQRT.9:      EQU     0xEBC8
SQRT.8:      EQU     0xEBC0
SQRT.7:      EQU     0xEBB8
SQRT.6:      EQU     0xEBB0
SQRT.5:      EQU     0xEBA8
SQRT.4:      EQU     0xEBA0
SQRT.3:      EQU     0xEB98
SQRT.2:      EQU     0xEB90
SQRT.1:      EQU     0xEB88
SQRT.0:      EQU     0xEB80

FMA.15:      EQU     0xEB78
FMA.14:      EQU     0xEB70
FMA.13:      EQU     0xEB68
FMA.12:      EQU     0xEB60
FMA.11:      EQU     0xEB58
FMA.10:      EQU     0xEB50
FMA.9:       EQU     0xEB48
FMA.8:       EQU     0xEB40
FMA.7:       EQU     0xEB38
FMA.6:       EQU     0xEB30
FMA.5:       EQU     0xEB28
FMA.4:       EQU     0xEB20
FMA.3:       EQU     0xEB18
FMA.2:       EQU     0xEB10
FMA.1:       EQU     0xEB08
FMA.0:       EQU     0xEB00

LOG.15:      EQU     0xEAF8
LOG.14:      EQU     0xEAF0
LOG.13:      EQU     0xEAE8
LOG.12:      EQU     0xEAE0
LOG.11:      EQU     0xEAD8
LOG.10:      EQU     0xEAD0
LOG.9:       EQU     0xEAC8
LOG.8:       EQU     0xEAC0
LOG.7:       EQU     0xEAB8
LOG.6:       EQU     0xEAB0
LOG.5:       EQU     0xEAA8
LOG.4:       EQU     0xEAA0
LOG.3:       EQU     0xEA98
LOG.2:       EQU     0xEA90
LOG.1:       EQU     0xEA88
LOG.0:       EQU     0xEA80

EXP.15:      EQU     0xEA78
EXP.14:      EQU     0xEA70
EXP.13:      EQU     0xEA68
EXP.12:      EQU     0xEA60
EXP.11:      EQU     0xEA58
EXP.10:      EQU     0xEA50
EXP.9:       EQU     0xEA48
EXP.8:       EQU     0xEA40
EXP.7:       EQU     0xEA38
EXP.6:       EQU     0xEA30
EXP.5:       EQU     0xEA28
EXP.4:       EQU     0xEA20
EXP.3:       EQU     0xEA18
EXP.2:       EQU     0xEA10
EXP.1:       EQU     0xEA08
EXP.0:       EQU     0xEA00

CONV.15:     EQU     0xE9F8    
CONV.14:     EQU     0xE9F0
CONV.13:     EQU     0xE9E8
CONV.12:     EQU     0xE9E0
CONV.11:     EQU     0xE9D8
CONV.10:     EQU     0xE9D0
CONV.9:      EQU     0xE9C8
CONV.8:      EQU     0xE9C0
CONV.7:      EQU     0xE9B8
CONV.6:      EQU     0xE9B0
CONV.5:      EQU     0xE9A8
CONV.4:      EQU     0xE9A0
CONV.3:      EQU     0xE998
CONV.2:      EQU     0xE990
CONV.1:      EQU     0xE988
CONV.0:      EQU     0xE980

RTOI.15:     EQU     0xE978    
RTOI.14:     EQU     0xE970
RTOI.13:     EQU     0xE968
RTOI.12:     EQU     0xE960
RTOI.11:     EQU     0xE958
RTOI.10:     EQU     0xE950
RTOI.9:      EQU     0xE948
RTOI.8:      EQU     0xE940
RTOI.7:      EQU     0xE938
RTOI.6:      EQU     0xE930
RTOI.5:      EQU     0xE928
RTOI.4:      EQU     0xE920
RTOI.3:      EQU     0xE918
RTOI.2:      EQU     0xE910
RTOI.1:      EQU     0xE908
RTOI.0:      EQU     0xE900

SCALEB.15:   EQU     0xE8F8       
SCALEB.14:   EQU     0xE8F0
SCALEB.13:   EQU     0xE8E8
SCALEB.12:   EQU     0xE8E0
SCALEB.11:   EQU     0xE8D8
SCALEB.10:   EQU     0xE8D0
SCALEB.9:    EQU     0xE8C8
SCALEB.8:    EQU     0xE8C0
SCALEB.7:    EQU     0xE8B8
SCALEB.6:    EQU     0xE8B0
SCALEB.5:    EQU     0xE8A8
SCALEB.4:    EQU     0xE8A0
SCALEB.3:    EQU     0xE898
SCALEB.2:    EQU     0xE890
SCALEB.1:    EQU     0xE888
SCALEB.0:    EQU     0xE880

LOGB.15:     EQU     0xE878
LOGB.14:     EQU     0xE870
LOGB.13:     EQU     0xE868
LOGB.12:     EQU     0xE860
LOGB.11:     EQU     0xE858
LOGB.10:     EQU     0xE850
LOGB.9:      EQU     0xE848
LOGB.8:      EQU     0xE840
LOGB.7:      EQU     0xE838
LOGB.6:      EQU     0xE830
LOGB.5:      EQU     0xE828
LOGB.4:      EQU     0xE820
LOGB.3:      EQU     0xE818
LOGB.2:      EQU     0xE810
LOGB.1:      EQU     0xE808
LOGB.0:      EQU     0xE800

REM.15:      EQU     0xE7F8       
REM.14:      EQU     0xE7F0
REM.13:      EQU     0xE7E8
REM.12:      EQU     0xE7E0
REM.11:      EQU     0xE7D8
REM.10:      EQU     0xE7D0
REM.9:       EQU     0xE7C8
REM.8:       EQU     0xE7C0
REM.7:       EQU     0xE7B8
REM.6:       EQU     0xE7B0
REM.5:       EQU     0xE7A8
REM.4:       EQU     0xE7A0
REM.3:       EQU     0xE798
REM.2:       EQU     0xE790
REM.1:       EQU     0xE788
REM.0:       EQU     0xE780

nextUp.7:    EQU     0xE778      
nextUp.6:    EQU     0xE770
nextUp.5:    EQU     0xE768
nextUp.4:    EQU     0xE760
nextUp.3:    EQU     0xE758
nextUp.2:    EQU     0xE750
nextUp.1:    EQU     0xE748
nextUp.0:    EQU     0xE740
nextDown.7:  EQU     0xE738
nextDown.6:  EQU     0xE730
nextDown.5:  EQU     0xE728
nextDown.4:  EQU     0xE720
nextDown.3:  EQU     0xE718
nextDown.2:  EQU     0xE710
nextDown.1:  EQU     0xE708
nextDown.0:  EQU     0xE700

maxNumMag.3: EQU     0xE6F8                             
maxNumMag.2: EQU     0xE6F0                             
maxNumMag.1: EQU     0xE6E8                             
maxNumMag.0: EQU     0xE6E0                             
minNumMag.3: EQU     0xE6D8                            
minNumMag.2: EQU     0xE6D0                            
minNumMag.1: EQU     0xE6C8                            
minNumMag.0: EQU     0xE6C0                            
maxNum.3:    EQU     0xE6B8                         
maxNum.2:    EQU     0XE6B0                         
maxNum.1:    EQU     0xE6A8                         
maxNum.0:    EQU     0xE6A0                         
minNum.3:    EQU     0xE698                          
minNum.2:    EQU     0xE690                          
minNum.1:    EQU     0xE688                          
minNum.0:    EQU     0xE680                          

copy.3:      EQU     0xE678      
copy.2:      EQU     0xE670
copy.1:      EQU     0xE668
copy.0:      EQU     0xE660
negate.3:    EQU     0xE658
negate.2:    EQU     0xE650
negate.1:    EQU     0xE648
negate.0:    EQU     0xE640
abs.3:       EQU     0xE638
abs.2:       EQU     0xE630
abs.1:       EQU     0xE628
abs.0:       EQU     0xE620
copySign.3:  EQU     0xE618
copySign.2:  EQU     0xE610
copySign.1:  EQU     0xE608
copySign.0:  EQU     0xE600

SIND.3:      EQU     0xE5F8 
SIND.2:      EQU     0xE5F0
SIND.1:      EQU     0xE5E8
SIND.0:      EQU     0xE5E0
COSD.3:      EQU     0xE5D8
COSD.2:      EQU     0xE5D0
COSD.1:      EQU     0xE5C8
COSD.0:      EQU     0xE5C0
TAND.3:      EQU     0xE5B8
TAND.2:      EQU     0xE5B0
TAND.1:      EQU     0xE5A8
TAND.0:      EQU     0xE5A0
COTD.3:      EQU     0xE598
COTD.2:      EQU     0xE590
COTD.1:      EQU     0xE588
COTD.0:      EQU     0xE580

cnvFDCS.15:  EQU     0xE578
cnvFDCS.14:  EQU     0xE570
cnvFDCS.13:  EQU     0xE568
cnvFDCS.12:  EQU     0xE560
cnvFDCS.11:  EQU     0xE558
cnvFDCS.10:  EQU     0xE550
cnvFDCS.9:   EQU     0xE548
cnvFDCS.8:   EQU     0xE540
cnvFDCS.7:   EQU     0xE538
cnvFDCS.6:   EQU     0xE530
cnvFDCS.5:   EQU     0xE528
cnvFDCS.4:   EQU     0xE520
cnvFDCS.3:   EQU     0xE518
cnvFDCS.2:   EQU     0xE510
cnvFDCS.1:   EQU     0xE508
cnvFDCS.0:   EQU     0xE500

cnvTDCS.15:  EQU     0xE4F8
cnvTDCS.14:  EQU     0xE4F0
cnvTDCS.13:  EQU     0xE4E8
cnvTDCS.12:  EQU     0xE4E0
cnvTDCS.11:  EQU     0xE4D8
cnvTDCS.10:  EQU     0xE4D0
cnvTDCS.9:   EQU     0xE4C8
cnvTDCS.8:   EQU     0xE4C0
cnvTDCS.7:   EQU     0xE4B8
cnvTDCS.6:   EQU     0xE4B0
cnvTDCS.5:   EQU     0xE4A8
cnvTDCS.4:   EQU     0xE4A0
cnvTDCS.3:   EQU     0xE498
cnvTDCS.2:   EQU     0xE490
cnvTDCS.1:   EQU     0xE488
cnvTDCS.0:   EQU     0xE480

cnvFHCS.15:  EQU     0xE478
cnvFHCS.14:  EQU     0xE470
cnvFHCS.13:  EQU     0xE468
cnvFHCS.12:  EQU     0xE460
cnvFHCS.11:  EQU     0xE458
cnvFHCS.10:  EQU     0xE450
cnvFHCS.9:   EQU     0xE448
cnvFHCS.8:   EQU     0xE440
cnvFHCS.7:   EQU     0xE438
cnvFHCS.6:   EQU     0xE430
cnvFHCS.5:   EQU     0xE428
cnvFHCS.4:   EQU     0xE420
cnvFHCS.3:   EQU     0xE418
cnvFHCS.2:   EQU     0xE410
cnvFHCS.1:   EQU     0xE408
cnvFHCS.0:   EQU     0xE400

cnvTHCS.15:  EQU     0xE3F8
cnvTHCS.14:  EQU     0xE3F0
cnvTHCS.13:  EQU     0xE3E8
cnvTHCS.12:  EQU     0xE3E0
cnvTHCS.11:  EQU     0xE3D8
cnvTHCS.10:  EQU     0xE3D0
cnvTHCS.9:   EQU     0xE3C8
cnvTHCS.8:   EQU     0xE3C0
cnvTHCS.7:   EQU     0xE3B8
cnvTHCS.6:   EQU     0xE3B0
cnvTHCS.5:   EQU     0xE3A8
cnvTHCS.4:   EQU     0xE3A0
cnvTHCS.3:   EQU     0xE398
cnvTHCS.2:   EQU     0xE390
cnvTHCS.1:   EQU     0xE388
cnvTHCS.0:   EQU     0xE380

pow.15:      EQU     0xE378
pow.14:      EQU     0xE370
pow.13:      EQU     0xE368
pow.12:      EQU     0xE360
pow.11:      EQU     0xE358
pow.10:      EQU     0xE350
pow.9:       EQU     0xE348
pow.8:       EQU     0xE340
pow.7:       EQU     0xE338
pow.6:       EQU     0xE330
pow.5:       EQU     0xE328
pow.4:       EQU     0xE320
pow.3:       EQU     0xE318
pow.2:       EQU     0xE310
pow.1:       EQU     0xE308
pow.0:       EQU     0xE300


cnvFBTA.15:  EQU     0xD7F8  ;convert from binary numeric to ASCII numeric                           
cnvFBTA.14:  EQU     0xD7F0
cnvFBTA.13:  EQU     0xD7E8
cnvFBTA.12:  EQU     0xD7E0
cnvFBTA.11:  EQU     0xD7D8
cnvFBTA.10:  EQU     0xD7D0
cnvFBTA.9:   EQU     0xD7C8
cnvFBTA.8:   EQU     0xD7C0
cnvFBTA.7:   EQU     0xD7B8
cnvFBTA.6:   EQU     0xD7B0
cnvFBTA.5:   EQU     0xD7A8
cnvFBTA.4:   EQU     0xD7A0
cnvFBTA.3:   EQU     0xD798
cnvFBTA.2:   EQU     0xD790
cnvFBTA.1:   EQU     0xD788
cnvFBTA.0:   EQU     0xD780

cnvTBFA.15:   EQU     0xD778  ;convert to binary numeric from ASCII numeric
cnvTBFA.14:   EQU     0xD770
cnvTBFA.13:   EQU     0xD768                                                                   
cnvTBFA.12:   EQU     0xD760
cnvTBFA.11:   EQU     0xD758
cnvTBFA.10:   EQU     0xD750
cnvTBFA.9:    EQU     0xD748
cnvTBFA.8:    EQU     0xD740
cnvTBFA.7:    EQU     0xD738
cnvTBFA.6:    EQU     0xD730
cnvTBFA.5:    EQU     0xD728
cnvTBFA.4:    EQU     0xD720
cnvTBFA.3:    EQU     0xD718
cnvTBFA.2:    EQU     0xD710
cnvTBFA.1:    EQU     0xD708
cnvTBFA.0:    EQU     0xD700

;----------------------------------------------------------------------------------------------
;Integer math and logic OPERATOR memory-mapped addresses and corresponding results storage bins
;----------------------------------------------------------------------------------------------

AND.15:      EQU     0xDFF8
AND.14:      EQU     0xDFF0
AND.13:      EQU     0xDFE8
AND.12:      EQU     0xDFE0
AND.11:      EQU     0xDFD8
AND.10:      EQU     0xDFD0
AND.9:       EQU     0xDFC8
AND.8:       EQU     0xDFC0
AND.7:       EQU     0xDFB8
AND.6:       EQU     0xDFB0
AND.5:       EQU     0xDFA8
AND.4:       EQU     0xDFA0
AND.3:       EQU     0xDF98
AND.2:       EQU     0xDF90
AND.1:       EQU     0xDF88
AND.0:       EQU     0xDF80

OR.15:       EQU     0xDF78
OR.14:       EQU     0xDF70
OR.13:       EQU     0xDF68
OR.12:       EQU     0xDF60
OR.11:       EQU     0xDF58
OR.10:       EQU     0xDF50
OR.9:        EQU     0xDF48
OR.8:        EQU     0xDF40
OR.7:        EQU     0xDF38
OR.6:        EQU     0xDF30
OR.5:        EQU     0xDF28
OR.4:        EQU     0xDF20
OR.3:        EQU     0xDF18
OR.2:        EQU     0xDF10
OR.1:        EQU     0xDF08
OR.0:        EQU     0xDF00

XOR.15:      EQU     0xDEF8
XOR.14:      EQU     0xDEF0
XOR.13:      EQU     0xDEE8
XOR.12:      EQU     0xDEE0
XOR.11:      EQU     0xDED8
XOR.10:      EQU     0xDED0
XOR.9:       EQU     0xDEC8
XOR.8:       EQU     0xDEC0
XOR.7:       EQU     0xDEB8
XOR.6:       EQU     0xDEB0
XOR.5:       EQU     0xDEA8
XOR.4:       EQU     0xDEA0
XOR.3:       EQU     0xDE98
XOR.2:       EQU     0xDE90
XOR.1:       EQU     0xDE88
XOR.0:       EQU     0xDE80

ADD.15:      EQU     0xDE78
ADD.14:      EQU     0xDE70
ADD.13:      EQU     0xDE68
ADD.12:      EQU     0xDE60
ADD.11:      EQU     0xDE58
ADD.10:      EQU     0xDE50
ADD.9:       EQU     0xDE48
ADD.8:       EQU     0xDE40
ADD.7:       EQU     0xDE38
ADD.6:       EQU     0xDE30
ADD.5:       EQU     0xDE28
ADD.4:       EQU     0xDE20
ADD.3:       EQU     0xDE18
ADD.2:       EQU     0xDE10
ADD.1:       EQU     0xDE08
ADD.0:       EQU     0xDE00

ADDC.15:     EQU     0xDDF8
ADDC.14:     EQU     0xDDF0
ADDC.13:     EQU     0xDDE8
ADDC.12:     EQU     0xDDE0
ADDC.11:     EQU     0xDDD8
ADDC.10:     EQU     0xDDD0
ADDC.9:      EQU     0xDDC8
ADDC.8:      EQU     0xDDC0
ADDC.7:      EQU     0xDDB8
ADDC.6:      EQU     0xDDB0
ADDC.5:      EQU     0xDDA8
ADDC.4:      EQU     0xDDA0
ADDC.3:      EQU     0xDD98
ADDC.2:      EQU     0xDD90
ADDC.1:      EQU     0xDD88
ADDC.0:      EQU     0xDD80

SUB.15:      EQU     0xDD78
SUB.14:      EQU     0xDD70
SUB.13:      EQU     0xDD68
SUB.12:      EQU     0xDD60
SUB.11:      EQU     0xDD58
SUB.10:      EQU     0xDD50
SUB.9:       EQU     0xDD48
SUB.8:       EQU     0xDD40
SUB.7:       EQU     0xDD38
SUB.6:       EQU     0xDD30
SUB.5:       EQU     0xDD28
SUB.4:       EQU     0xDD20
SUB.3:       EQU     0xDD18
SUB.2:       EQU     0xDD10
SUB.1:       EQU     0xDD08
SUB.0:       EQU     0xDD00

SUBB.15:     EQU     0xDCF8
SUBB.14:     EQU     0xDCF0
SUBB.13:     EQU     0xDCE8
SUBB.12:     EQU     0xDCE0
SUBB.11:     EQU     0xDCD8
SUBB.10:     EQU     0xDCD0
SUBB.9:      EQU     0xDCC8
SUBB.8:      EQU     0xDCC0
SUBB.7:      EQU     0xDCB8
SUBB.6:      EQU     0xDCB0
SUBB.5:      EQU     0xDCA8
SUBB.4:      EQU     0xDCA0
SUBB.3:      EQU     0xDC98
SUBB.2:      EQU     0xDC90
SUBB.1:      EQU     0xDC88
SUBB.0:      EQU     0xDC80

MUL.15:      EQU     0xDC78
MUL.14:      EQU     0xDC70
MUL.13:      EQU     0xDC68
MUL.12:      EQU     0xDC60
MUL.11:      EQU     0xDC58
MUL.10:      EQU     0xDC50
MUL.9:       EQU     0xDC48
MUL.8:       EQU     0xDC40
MUL.7:       EQU     0xDC38
MUL.6:       EQU     0xDC30
MUL.5:       EQU     0xDC28
MUL.4:       EQU     0xDC20
MUL.3:       EQU     0xDC18
MUL.2:       EQU     0xDC10
MUL.1:       EQU     0xDC08
MUL.0:       EQU     0xDC00

DIV.15:      EQU     0xDBF8
DIV.14:      EQU     0xDBF0
DIV.13:      EQU     0xDBE8
DIV.12:      EQU     0xDBE0
DIV.11:      EQU     0xDBD8
DIV.10:      EQU     0xDBD0
DIV.9:       EQU     0xDBC8
DIV.8:       EQU     0xDBC0
DIV.7:       EQU     0xDBB8
DIV.6:       EQU     0xDBB0
DIV.5:       EQU     0xDBA8
DIV.4:       EQU     0xDBA0
DIV.3:       EQU     0xDB98
DIV.2:       EQU     0xDB90
DIV.1:       EQU     0xDB88
DIV.0:       EQU     0xDB80

SHIFT.15:    EQU     0xDB78
SHIFT.14:    EQU     0xDB70
SHIFT.13:    EQU     0xDB68
SHIFT.12:    EQU     0xDB60
SHIFT.11:    EQU     0xDB58
SHIFT.10:    EQU     0xDB50
SHIFT.9:     EQU     0xDB48
SHIFT.8:     EQU     0xDB40
SHIFT.7:     EQU     0xDB38
SHIFT.6:     EQU     0xDB30
SHIFT.5:     EQU     0xDB28
SHIFT.4:     EQU     0xDB20
SHIFT.3:     EQU     0xDB18
SHIFT.2:     EQU     0xDB10
SHIFT.1:     EQU     0xDB08
SHIFT.0:     EQU     0xDB00

MAX.15:      EQU     0xDAF8
MAX.14:      EQU     0xDAF0
MAX.13:      EQU     0xDAE8
MAX.12:      EQU     0xDAE0
MAX.11:      EQU     0xDAD8
MAX.10:      EQU     0xDAD0
MAX.9:       EQU     0xDAC8
MAX.8:       EQU     0xDAC0
MAX.7:       EQU     0xDAB8
MAX.6:       EQU     0xDAB0
MAX.5:       EQU     0xDAA8
MAX.4:       EQU     0xDAA0
MAX.3:       EQU     0xDA98
MAX.2:       EQU     0xDA90
MAX.1:       EQU     0xDA88
MAX.0:       EQU     0xDA80

MIN.15:      EQU     0xDA78
MIN.14:      EQU     0xDA70
MIN.13:      EQU     0xDA68
MIN.12:      EQU     0xDA60
MIN.11:      EQU     0xDA58
MIN.10:      EQU     0xDA50
MIN.9:       EQU     0xDA48
MIN.8:       EQU     0xDA40
MIN.7:       EQU     0xDA38
MIN.6:       EQU     0xDA30
MIN.5:       EQU     0xDA28
MIN.4:       EQU     0xDA20
MIN.3:       EQU     0xDA18
MIN.2:       EQU     0xDA10
MIN.1:       EQU     0xDA08
MIN.0:       EQU     0xDA00

BSET.15:     EQU     0xD9F8
BSET.14:     EQU     0xD9F0
BSET.13:     EQU     0xD9E8
BSET.12:     EQU     0xD9E0
BSET.11:     EQU     0xD9D8
BSET.10:     EQU     0xD9D0
BSET.9:      EQU     0xD9C8
BSET.8:      EQU     0xD9C0
BSET.7:      EQU     0xD9B8
BSET.6:      EQU     0xD9B0
BSET.5:      EQU     0xD9A8
BSET.4:      EQU     0xD9A0
BSET.3:      EQU     0xD998
BSET.2:      EQU     0xD990
BSET.1:      EQU     0xD988
BSET.0:      EQU     0xD980

BCLR.15:     EQU     0xD978
BCLR.14:     EQU     0xD970
BCLR.13:     EQU     0xD968
BCLR.12:     EQU     0xD960
BCLR.11:     EQU     0xD958
BCLR.10:     EQU     0xD950
BCLR.9:      EQU     0xD948
BCLR.8:      EQU     0xD940
BCLR.7:      EQU     0xD938
BCLR.6:      EQU     0xD930
BCLR.5:      EQU     0xD928
BCLR.4:      EQU     0xD920
BCLR.3:      EQU     0xD918
BCLR.2:      EQU     0xD910
BCLR.1:      EQU     0xD908
BCLR.0:      EQU     0xD900

ENDI.15:     EQU     0xD8F8
ENDI.14:     EQU     0xD8F0
ENDI.13:     EQU     0xD8E8
ENDI.12:     EQU     0xD8E0
ENDI.11:     EQU     0xD8D8
ENDI.10:     EQU     0xD8D0
ENDI.9:      EQU     0xD8C8
ENDI.8:      EQU     0xD8C0
ENDI.7:      EQU     0xD8B8
ENDI.6:      EQU     0xD8B0
ENDI.5:      EQU     0xD8A8
ENDI.4:      EQU     0xD8A0
ENDI.3:      EQU     0xD898
ENDI.2:      EQU     0xD890
ENDI.1:      EQU     0xD888
ENDI.0:      EQU     0xD880

BUBL.15:     EQU     0xD878          ;bubble sort this list
BUBL.14:     EQU     0xD870
BUBL.13:     EQU     0xD868
BUBL.12:     EQU     0xD860
BUBL.11:     EQU     0xD858
BUBL.10:     EQU     0xD850
BUBL.9:      EQU     0xD848
BUBL.8:      EQU     0xD840
BUBL.7:      EQU     0xD838
BUBL.6:      EQU     0xD830
BUBL.5:      EQU     0xD828
BUBL.4:      EQU     0xD820
BUBL.3:      EQU     0xD818
BUBL.2:      EQU     0xD810
BUBL.1:      EQU     0xD808
BUBL.0:      EQU     0xD800
